{
  "version": 3,
  "sources": ["../../tom-select/src/contrib/microevent.ts", "../../tom-select/src/contrib/microplugin.ts", "../../@orchidjs/unicode-variants/lib/regex.ts", "../../@orchidjs/unicode-variants/lib/strings.ts", "../../@orchidjs/unicode-variants/lib/index.ts", "../../@orchidjs/sifter/lib/utils.ts", "../../@orchidjs/sifter/lib/sifter.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/contrib/highlight.ts", "../../tom-select/src/constants.ts", "../../tom-select/src/defaults.ts", "../../tom-select/src/getSettings.ts", "../../tom-select/src/tom-select.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/plugins/change_listener/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/checkbox_options/plugin.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/clear_button/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/drag_drop/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/dropdown_header/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/caret_position/plugin.ts", "../../tom-select/src/constants.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/dropdown_input/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/plugins/input_autogrow/plugin.ts", "../../tom-select/src/plugins/no_backspace_delete/plugin.ts", "../../tom-select/src/plugins/no_active_items/plugin.ts", "../../tom-select/src/constants.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/optgroup_columns/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/remove_button/plugin.ts", "../../tom-select/src/plugins/restore_on_backspace/plugin.ts", "../../tom-select/src/utils.ts", "../../tom-select/src/vanilla.ts", "../../tom-select/src/plugins/virtual_scroll/plugin.ts", "../../tom-select/src/tom-select.complete.ts"],
  "sourcesContent": ["/**\n * MicroEvent - to make any js object an event emitter\n *\n * - pure javascript - server compatible, browser compatible\n * - dont rely on the browser doms\n * - super simple - you get it immediatly, no mistery, no magic involved\n *\n * @author Jerome Etienne (https://github.com/jeromeetienne)\n */\n\ntype TCallback = (...args:any) => any;\n\n/**\n * Execute callback for each event in space separated list of event names\n *\n */\nfunction forEvents(events:string,callback:(event:string)=>any){\n\tevents.split(/\\s+/).forEach((event) =>{\n\t\tcallback(event);\n\t});\n}\n\nexport default class MicroEvent{\n\n\tpublic _events: {[key:string]:TCallback[]};\n\n\tconstructor(){\n\t\tthis._events = {};\n\t}\n\n\ton(events:string, fct:TCallback){\n\t\tforEvents(events,(event) => {\n\t\t\tconst event_array = this._events[event] || [];\n\t\t\tevent_array.push(fct);\n\t\t\tthis._events[event] = event_array;\n\t\t});\n\t}\n\n\toff(events:string, fct:TCallback){\n\t\tvar n = arguments.length;\n\t\tif( n === 0 ){\n\t\t\tthis._events = {};\n\t\t\treturn;\n\t\t}\n\n\t\tforEvents(events,(event) => {\n\n\t\t\tif (n === 1){\n\t\t\t\tdelete this._events[event];\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst event_array = this._events[event];\n\t\t\tif( event_array === undefined ) return;\n\n\t\t\tevent_array.splice(event_array.indexOf(fct), 1);\n\t\t\tthis._events[event] = event_array;\n\t\t});\n\t}\n\n\ttrigger(events:string, ...args:any){\n\t\tvar self = this;\n\n\t\tforEvents(events,(event) => {\n\t\t\tconst event_array = self._events[event];\n\t\t\tif( event_array === undefined ) return;\n\t\t\tevent_array.forEach(fct => {\n\t\t\t\tfct.apply(self, args );\n\t\t\t});\n\n\t\t});\n\t}\n};\n", "/**\n * microplugin.js\n * Copyright (c) 2013 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\ntype TSettings = {\n\t[key:string]:any\n}\n\ntype TPlugins = {\n\tnames: string[],\n\tsettings: TSettings,\n\trequested: {[key:string]:boolean},\n\tloaded: {[key:string]:any}\n};\n\nexport type TPluginItem = {name:string,options:{}};\nexport type TPluginHash = {[key:string]:{}};\n\n\n\n\nexport default function MicroPlugin(Interface: any ){\n\n\tInterface.plugins = {};\n\n\treturn class extends Interface{\n\n\t\tpublic plugins:TPlugins = {\n\t\t\tnames     : [],\n\t\t\tsettings  : {},\n\t\t\trequested : {},\n\t\t\tloaded    : {}\n\t\t};\n\n\t\t/**\n\t\t * Registers a plugin.\n\t\t *\n\t\t * @param {function} fn\n\t\t */\n\t\tstatic define(name:string, fn:(this:any,settings:TSettings)=>any){\n\t\t\tInterface.plugins[name] = {\n\t\t\t\t'name' : name,\n\t\t\t\t'fn'   : fn\n\t\t\t};\n\t\t}\n\n\n\t\t/**\n\t\t * Initializes the listed plugins (with options).\n\t\t * Acceptable formats:\n\t\t *\n\t\t * List (without options):\n\t\t *   ['a', 'b', 'c']\n\t\t *\n\t\t * List (with options):\n\t\t *   [{'name': 'a', options: {}}, {'name': 'b', options: {}}]\n\t\t *\n\t\t * Hash (with options):\n\t\t *   {'a': { ... }, 'b': { ... }, 'c': { ... }}\n\t\t *\n\t\t * @param {array|object} plugins\n\t\t */\n\t\tinitializePlugins(plugins:string[]|TPluginItem[]|TPluginHash) {\n\t\t\tvar key, name;\n\t\t\tconst self  = this;\n\t\t\tconst queue:string[] = [];\n\n\t\t\tif (Array.isArray(plugins)) {\n\t\t\t\tplugins.forEach((plugin:string|TPluginItem)=>{\n\t\t\t\t\tif (typeof plugin === 'string') {\n\t\t\t\t\t\tqueue.push(plugin);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.plugins.settings[plugin.name] = plugin.options;\n\t\t\t\t\t\tqueue.push(plugin.name);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else if (plugins) {\n\t\t\t\tfor (key in plugins) {\n\t\t\t\t\tif (plugins.hasOwnProperty(key)) {\n\t\t\t\t\t\tself.plugins.settings[key] = plugins[key];\n\t\t\t\t\t\tqueue.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile( name = queue.shift() ){\n\t\t\t\tself.require(name);\n\t\t\t}\n\t\t}\n\n\t\tloadPlugin(name:string) {\n\t\t\tvar self    = this;\n\t\t\tvar plugins = self.plugins;\n\t\t\tvar plugin  = Interface.plugins[name];\n\n\t\t\tif (!Interface.plugins.hasOwnProperty(name)) {\n\t\t\t\tthrow new Error('Unable to find \"' +  name + '\" plugin');\n\t\t\t}\n\n\t\t\tplugins.requested[name] = true;\n\t\t\tplugins.loaded[name] = plugin.fn.apply(self, [self.plugins.settings[name] || {}]);\n\t\t\tplugins.names.push(name);\n\t\t}\n\n\t\t/**\n\t\t * Initializes a plugin.\n\t\t *\n\t\t */\n\t\trequire(name:string) {\n\t\t\tvar self = this;\n\t\t\tvar plugins = self.plugins;\n\n\t\t\tif (!self.plugins.loaded.hasOwnProperty(name)) {\n\t\t\t\tif (plugins.requested[name]) {\n\t\t\t\t\tthrow new Error('Plugin has circular dependency (\"' + name + '\")');\n\t\t\t\t}\n\t\t\t\tself.loadPlugin(name);\n\t\t\t}\n\n\t\t\treturn plugins.loaded[name];\n\t\t}\n\n\t};\n\n}\n", "/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n */\nexport const arrayToPattern = (chars: string[]): string => {\n\n\tchars = chars.filter( Boolean );\n\n\tif( chars.length < 2 ){\n\t\treturn chars[0] || '';\n\t}\n\n\treturn (maxValueLength(chars) == 1) ? '['+chars.join('')+']' : '(?:'+chars.join('|')+')';\n};\n\nexport const sequencePattern = (array: string[]): string => {\n\n\tif( !hasDuplicates(array) ){\n\t\treturn array.join('');\n\t}\n\n\tlet pattern = '';\n\tlet prev_char_count = 0;\n\n\tconst prev_pattern = ()=>{\n\t\tif( prev_char_count > 1 ){\n\t\t\tpattern += '{'+prev_char_count+'}';\n\t\t}\n\t}\n\n\tarray.forEach((char,i)=>{\n\n\t\tif( char === array[i-1] ){\n\t\t\tprev_char_count++;\n\t\t\treturn;\n\t\t}\n\n\t\tprev_pattern();\n\n\t\tpattern += char;\n\t\tprev_char_count = 1;\n\t});\n\n\tprev_pattern();\n\n\treturn pattern;\n\n}\n\n\n\n/**\n * Convert array of strings to a regular expression\n *\tex ['ab','a'] => (?:ab|a)\n * \tex ['a','b'] => [ab]\n */\nexport const setToPattern = (chars: Set<string>): string => {\n\tlet array = Array.from(chars);\n\treturn arrayToPattern(array);\n}\n\n\n\n/**\n * https://stackoverflow.com/questions/7376598/in-javascript-how-do-i-check-if-an-array-has-duplicate-values\n */\nexport const hasDuplicates = (array: any[]) => {\n    return (new Set(array)).size !== array.length;\n}\n\n\n/**\n * https://stackoverflow.com/questions/63006601/why-does-u-throw-an-invalid-escape-error\n */\nexport const escape_regex = (str: string): string => {\n\treturn (str + '').replace(/([\\$\\(\\)\\*\\+\\.\\?\\[\\]\\^\\{\\|\\}\\\\])/gu, '\\\\$1');\n};\n\n/**\n * Return the max length of array values\n */\nexport const maxValueLength = (array: string[]) => {\n\treturn array.reduce( (longest, value) => Math.max(longest,unicodeLength(value)),0);\n}\n\n\nexport const unicodeLength = (str: string) => {\n\treturn Array.from(str).length;\n}\n", "/**\n * Get all possible combinations of substrings that add up to the given string\n * https://stackoverflow.com/questions/30169587/find-all-the-combination-of-substrings-that-add-up-to-the-given-string\n */\nexport const allSubstrings = (input: string): string[][] => {\n\n    if( input.length === 1) return [[input]];\n\n    let result: string[][] = [];\n\n\tconst start = input.substring(1);\n    const suba = allSubstrings(start);\n\n\tsuba.forEach(function(subresult) {\n        let tmp = subresult.slice(0);\n        tmp[0] = input.charAt(0) + tmp[0];\n        result.push(tmp);\n\n        tmp = subresult.slice(0);\n        tmp.unshift(input.charAt(0));\n        result.push(tmp);\n    });\n\n    return result;\n}\n", "import { setToPattern, arrayToPattern, escape_regex, sequencePattern } from './regex.ts';\nimport { allSubstrings } from './strings.ts';\n\nexport type TUnicodeMap = {[key:string]:string};\nexport type TUnicodeSets = {[key:string]:Set<string>};\nexport type TCodePoints = [[number,number]];\nexport type TCodePointObj = {folded:string,composed:string,code_point:number}\nexport type TSequencePart = {start:number,end:number,length:number,substr:string}\n\nexport const code_points: TCodePoints = [[ 0, 65535 ]];\n\nconst accent_pat = '[\\u0300-\\u036F\\u{b7}\\u{2be}\\u{2bc}]';\n\nexport let unicode_map: TUnicodeMap;\n\nlet multi_char_reg: RegExp;\n\nconst max_char_length = 3;\n\nconst latin_convert: TUnicodeMap = {}\n\nconst latin_condensed: TUnicodeMap = {\n\t'/': '⁄∕',\n\t'0': '߀',\n\t\"a\": \"ⱥɐɑ\",\n\t\"aa\": \"ꜳ\",\n\t\"ae\": \"æǽǣ\",\n\t\"ao\": \"ꜵ\",\n\t\"au\": \"ꜷ\",\n\t\"av\": \"ꜹꜻ\",\n\t\"ay\": \"ꜽ\",\n\t\"b\": \"ƀɓƃ\",\n\t\"c\": \"ꜿƈȼↄ\",\n\t\"d\": \"đɗɖᴅƌꮷԁɦ\",\n\t\"e\": \"ɛǝᴇɇ\",\n\t\"f\": \"ꝼƒ\",\n\t\"g\": \"ǥɠꞡᵹꝿɢ\",\n\t\"h\": \"ħⱨⱶɥ\",\n\t\"i\": \"ɨı\",\n\t\"j\": \"ɉȷ\",\n\t\"k\": \"ƙⱪꝁꝃꝅꞣ\",\n\t\"l\": \"łƚɫⱡꝉꝇꞁɭ\",\n\t\"m\": \"ɱɯϻ\",\n\t\"n\": \"ꞥƞɲꞑᴎлԉ\",\n\t\"o\": \"øǿɔɵꝋꝍᴑ\",\n\t\"oe\": \"œ\",\n\t\"oi\": \"ƣ\",\n\t\"oo\": \"ꝏ\",\n\t\"ou\": \"ȣ\",\n\t\"p\": \"ƥᵽꝑꝓꝕρ\",\n\t\"q\": \"ꝗꝙɋ\",\n\t\"r\": \"ɍɽꝛꞧꞃ\",\n\t\"s\": \"ßȿꞩꞅʂ\",\n\t\"t\": \"ŧƭʈⱦꞇ\",\n\t\"th\": \"þ\",\n\t\"tz\": \"ꜩ\",\n\t\"u\": \"ʉ\",\n\t\"v\": \"ʋꝟʌ\",\n\t\"vy\": \"ꝡ\",\n\t\"w\": \"ⱳ\",\n\t\"y\": \"ƴɏỿ\",\n\t\"z\": \"ƶȥɀⱬꝣ\",\n\t\"hv\": \"ƕ\"\n}\n\n\nfor( let latin in latin_condensed ){\n\tlet unicode = latin_condensed[latin] || '';\n\tfor( let i = 0; i < unicode.length; i++){\n\t\tlet char\t= unicode.substring(i,i+1);\n\t\tlatin_convert[char] = latin;\n\t}\n}\n\n\nconst convert_pat = new RegExp(Object.keys(latin_convert).join('|')+'|'+accent_pat,'gu');\n\n\n\n/**\n * Initialize the unicode_map from the give code point ranges\n */\nexport const initialize = (_code_points?: TCodePoints) => {\n\tif( unicode_map !== undefined ) return;\n\tunicode_map = generateMap(_code_points || code_points );\n}\n\n\n/**\n * Helper method for normalize a string\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\n */\nexport const normalize = (str: string, form: string = 'NFKD') => str.normalize(form);\n\n\n\n/**\n * Remove accents without reordering string\n * calling str.normalize('NFKD') on \\u{594}\\u{595}\\u{596} becomes \\u{596}\\u{594}\\u{595}\n * via https://github.com/krisk/Fuse/issues/133#issuecomment-318692703\n */\nexport const asciifold = (str: string): string => {\n\n\treturn Array.from(str).reduce(\n\t\t/**\n\t\t * @param {string} result\n\t\t * @param {string} char\n\t\t */\n\t\t(result, char) =>{\n\t\t\treturn result + _asciifold(char)\n\t\t},\n\t\t''\n\t);\n};\n\nexport const _asciifold = (str: string): string => {\n\tstr = normalize(str)\n\t\t.toLowerCase()\n\t\t.replace(convert_pat,(/** @type {string} */ char) => {\n\t\t\treturn latin_convert[char] || '';\n\t\t})\n\n\t//return str;\n\treturn normalize(str,'NFC')\n};\n\n/**\n * Generate a list of unicode variants from the list of code points\n */\nexport function* generator(code_points: TCodePoints): Generator<TCodePointObj> {\n\n\tfor(const [code_point_min, code_point_max] of code_points){\n\t\tfor(let i = code_point_min; i <= code_point_max; i++){\n\n\t\t\tlet composed\t\t= String.fromCharCode(i);\n\t\t\tlet folded\t\t\t= asciifold(composed);\n\n\n\t\t\tif( folded == composed.toLowerCase() ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// skip when folded is a string longer than 3 characters long\n\t\t\t// bc the resulting regex patterns will be long\n\t\t\t// eg:\n\t\t\t// folded صلى الله عليه وسلم length 18 code point 65018\n\t\t\t// folded جل جلاله length 8 code point 65019\n\t\t\tif( folded.length > max_char_length ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( folded.length == 0 ){\n\t\t\t\tcontinue\n\t\t\t}\n\n\n\t\t\tyield {folded:folded,composed:composed,code_point:i};\n\t\t}\n\t}\n}\n\n\n/**\n * Generate a unicode map from the list of code points\n */\nexport const generateSets = (code_points: TCodePoints): TUnicodeSets => {\n\n\tconst unicode_sets: {[key: string]: Set<string>} = {};\n\n\tconst addMatching = (folded: string, to_add: string) => {\n\n\t\t/** @type {Set<string>} */\n\t\tconst folded_set = unicode_sets[folded] || new Set();\n\n\t\tconst patt = new RegExp( '^'+setToPattern(folded_set)+'$','iu');\n\t\tif( to_add.match(patt) ){\n\t\t\treturn;\n\t\t}\n\n\t\tfolded_set.add(escape_regex(to_add));\n\t\tunicode_sets[folded] = folded_set;\n\t}\n\n\n\tfor( let value of generator(code_points) ){\n\t\taddMatching(value.folded,value.folded);\n\t\taddMatching(value.folded,value.composed);\n\t}\n\n\treturn unicode_sets;\n}\n\n/**\n * Generate a unicode map from the list of code points\n * ae => (?:(?:ae|Æ|Ǽ|Ǣ)|(?:A|Ⓐ|Ａ...)(?:E|ɛ|Ⓔ...))\n */\nexport const generateMap = (code_points: TCodePoints): TUnicodeMap => {\n\tconst unicode_sets = generateSets(code_points);\n\n\tconst unicode_map: TUnicodeMap = {};\n\n\tlet multi_char: string[] = [];\n\n\tfor( let folded in unicode_sets ){\n\n\t\tlet set = unicode_sets[folded];\n\t\tif( set ){\n\t\t\tunicode_map[folded] = setToPattern(set);\n\t\t}\n\n\t\tif( folded.length > 1 ){\n\t\t\tmulti_char.push(escape_regex(folded));\n\t\t}\n\t}\n\n\tmulti_char.sort((a, b) => b.length - a.length );\n\tconst multi_char_patt = arrayToPattern(multi_char);\n\tmulti_char_reg = new RegExp('^'+multi_char_patt,'u');\n\n\treturn unicode_map;\n}\n\n\n/**\n * Map each element of an array from its folded value to all possible unicode matches\n */\nexport const mapSequence = (strings: string[], min_replacement: number = 1): string =>{\n\tlet chars_replaced = 0;\n\n\tstrings = strings.map((str)=>{\n\t\tif( unicode_map[str] ){\n\t\t\tchars_replaced += str.length;\n\t\t}\n\t\treturn unicode_map[str] || str;\n\t});\n\n\tif( chars_replaced >= min_replacement ){\n\t\treturn sequencePattern(strings);\n\t}\n\n\treturn '';\n}\n\n/**\n * Convert a short string and split it into all possible patterns\n * Keep a pattern only if min_replacement is met\n *\n * 'abc'\n * \t\t=> [['abc'],['ab','c'],['a','bc'],['a','b','c']]\n *\t\t=> ['abc-pattern','ab-c-pattern'...]\n */\nexport const substringsToPattern = (str: string, min_replacement: number = 1): string => {\n\n\tmin_replacement = Math.max(min_replacement,str.length-1);\n\n\treturn arrayToPattern(\n\t\tallSubstrings(str).map( (sub_pat) =>{\n\t\t\treturn mapSequence(sub_pat,min_replacement)\n\t\t})\n\t);\n}\n\n/**\n * Convert an array of sequences into a pattern\n * [{start:0,end:3,length:3,substr:'iii'}...] => (?:iii...)\n */\nconst sequencesToPattern = (sequences: Sequence[], all: boolean = true) => {\n\n\tlet min_replacement = sequences.length > 1 ? 1 : 0;\n\treturn arrayToPattern(\n\t\tsequences.map( (sequence) =>{\n\t\t\tlet seq: string[] = [];\n\t\t\tconst len = all ? sequence.length() : sequence.length() - 1;\n\t\t\tfor( let j = 0; j < len; j++){\n\t\t\t\tseq.push(substringsToPattern(sequence.substrs[j]||'',min_replacement));\n\t\t\t}\n\n\t\t\treturn sequencePattern(seq);\n\t\t})\n\t);\n}\n\n/**\n * Return true if the sequence is already in the sequences\n */\nconst inSequences = (needle_seq: Sequence, sequences: Sequence[]) => {\n\n\tfor(const seq of sequences){\n\n\t\tif( seq.start != needle_seq.start || seq.end != needle_seq.end ){\n\t\t\tcontinue;\n\t\t}\n\n\t\tif( seq.substrs.join('') !== needle_seq.substrs.join('') ){\n\t\t\tcontinue;\n\t\t}\n\n\n\t\tlet needle_parts\t= needle_seq.parts;\n\n\t\tconst filter = (part: TSequencePart) =>{\n\n\t\t\tfor(const needle_part of needle_parts){\n\n\t\t\t\tif( needle_part.start === part.start && needle_part.substr === part.substr ){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif( part.length == 1 || needle_part.length == 1 ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\n\t\t\t\t// check for overlapping parts\n\t\t\t\t// a = ['::=','==']\n\t\t\t\t// b = ['::','===']\n\t\t\t\t// a = ['r','sm']\n\t\t\t\t// b = ['rs','m']\n\t\t\t\tif( part.start < needle_part.start && part.end > needle_part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif( needle_part.start < part.start && needle_part.end > part.start ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tlet filtered = seq.parts.filter(filter);\n\n\t\tif( filtered.length > 0 ){\n\t\t\tcontinue;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nclass Sequence{\n\tparts: TSequencePart[];\n\tsubstrs: string[];\n\tstart: number;\n\tend: number;\n\n\tconstructor(){\n\t\tthis.parts\t\t= [];\n\t\tthis.substrs\t= [];\n\t\tthis.start\t\t= 0;\n\t\tthis.end\t\t= 0;\n\t}\n\n\tadd(part: TSequencePart|undefined){\n\t\tif( part ){\n\t\t\tthis.parts.push(part);\n\t\t\tthis.substrs.push(part.substr);\n\t\t\tthis.start\t= Math.min(part.start,this.start);\n\t\t\tthis.end\t= Math.max(part.end,this.end);\n\t\t}\n\t}\n\n\tlast(){\n\t\treturn this.parts[this.parts.length-1];\n\t}\n\n\tlength(){\n\t\treturn this.parts.length;\n\t}\n\n\tclone(position: number, last_piece: TSequencePart){\n\t\tlet clone = new Sequence();\n\n\t\tlet parts = JSON.parse(JSON.stringify(this.parts));\n\t\tlet last_part = parts.pop();\n\t\tfor( const part of parts ){\n\t\t\tclone.add(part);\n\t\t}\n\n\t\tlet last_substr = last_piece.substr.substring(0,position-last_part.start);\n\t\tlet clone_last_len = last_substr.length;\n\t\tclone.add({start:last_part.start,end:last_part.start+clone_last_len,length:clone_last_len,substr:last_substr});\n\n\t\treturn clone;\n\t}\n\n}\n\n/**\n * Expand a regular expression pattern to include unicode variants\n * \teg /a/ becomes /aⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐɑAⒶＡÀÁÂẦẤẪẨÃĀĂẰẮẴẲȦǠÄǞẢÅǺǍȀȂẠẬẶḀĄȺⱯ/\n *\n * Issue:\n *  ﺊﺋ [ 'ﺊ = \\\\u{fe8a}', 'ﺋ = \\\\u{fe8b}' ]\n *\tbecomes:\tئئ [ 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}', 'ي = \\\\u{64a}', 'ٔ = \\\\u{654}' ]\n *\n *\tİĲ = IIJ = ⅡJ\n *\n * \t1/2/4\n */\nexport const getPattern = (str: string): string | undefined => {\n\tinitialize();\n\n\tstr\t\t\t\t\t= asciifold(str);\n\n\tlet pattern\t\t\t= '';\n\tlet sequences\t\t= [new Sequence()];\n\n\tfor( let i = 0; i < str.length; i++ ){\n\n\t\tlet substr\t= str.substring(i);\n\t\tlet match\t= substr.match(multi_char_reg);\n\t\tconst char\t= str.substring(i,i+1);\n\t\tconst match_str = match ? match[0] : null;\n\n\n\t\t// loop through sequences\n\t\t// add either the char or multi_match\n\t\tlet overlapping: Sequence[]\t= [];\n\t\tlet added_types\t\t\t\t\t\t\t= new Set();\n\t\tfor(const sequence of sequences){\n\n\t\t\tconst last_piece\t= sequence.last();\n\n\n\t\t\tif( !last_piece || last_piece.length == 1 || last_piece.end <= i ){\n\n\t\t\t\t// if we have a multi match\n\t\t\t\tif( match_str ){\n\t\t\t\t\tconst len = match_str.length;\n\t\t\t\t\tsequence.add({start:i,end:i+len,length:len,substr:match_str});\n\t\t\t\t\tadded_types.add('1');\n\t\t\t\t}else{\n\t\t\t\t\tsequence.add({start:i,end:i+1,length:1,substr:char});\n\t\t\t\t\tadded_types.add('2');\n\t\t\t\t}\n\n\t\t\t}else if( match_str ){\n\n\t\t\t\tlet clone = sequence.clone(i,last_piece);\n\n\t\t\t\tconst len = match_str.length;\n\t\t\t\tclone.add({start:i,end:i+len,length:len,substr:match_str});\n\n\t\t\t\toverlapping.push(clone);\n\n\t\t\t}else{\n\t\t\t\t// don't add char\n\t\t\t\t// adding would create invalid patterns: 234 => [2,34,4]\n\t\t\t\tadded_types.add('3');\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if we have overlapping\n\t\tif( overlapping.length > 0 ){\n\n\t\t\t// ['ii','iii'] before ['i','i','iii']\n\t\t\toverlapping = overlapping.sort((a,b)=>{\n\t\t\t\treturn a.length() - b.length();\n\t\t\t});\n\n\t\t\tfor( let clone of overlapping){\n\n\t\t\t\t// don't add if we already have an equivalent sequence\n\t\t\t\tif( inSequences(clone, sequences) ){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsequences.push(clone);\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\n\t\t// if we haven't done anything unique\n\t\t// clean up the patterns\n\t\t// helps keep patterns smaller\n\t\t// if str = 'r₨㎧aarss', pattern will be 446 instead of 655\n\t\tif( i > 0 && added_types.size == 1 && !added_types.has('3') ){\n\t\t\tpattern += sequencesToPattern(sequences,false);\n\t\t\tlet new_seq = new Sequence();\n\t\t\tconst old_seq = sequences[0];\n\t\t\tif( old_seq ){\n\t\t\t\tnew_seq.add(old_seq.last());\n\t\t\t}\n\t\t\tsequences = [new_seq];\n\t\t}\n\n\t}\n\n\tpattern += sequencesToPattern(sequences,true);\n\n\treturn pattern;\n}\n\n\nexport { escape_regex };\n", "\nimport { asciifold } from '@orchidjs/unicode-variants';\nimport * as T from './types.ts';\n\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttr = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    return obj[name];\n};\n\n/**\n * A property getter resolving dot-notation\n * @param  {Object}  obj     The root object to fetch property on\n * @param  {String}  name    The optionally dotted property name to fetch\n * @return {Object}          The resolved property value\n */\nexport const getAttrNesting = (obj:{[key:string]:any}, name:string ) => {\n    if (!obj ) return;\n    var part, names = name.split(\".\");\n\twhile( (part = names.shift()) && (obj = obj[part]));\n    return obj;\n};\n\n/**\n * Calculates how close of a match the\n * given value is against a search token.\n *\n */\nexport const scoreValue = (value:string, token:T.Token, weight:number ):number => {\n\tvar score, pos;\n\n\tif (!value) return 0;\n\n\tvalue = value + '';\n\tif( token.regex == null ) return 0;\n\tpos = value.search(token.regex);\n\tif (pos === -1) return 0;\n\n\tscore = token.string.length / value.length;\n\tif (pos === 0) score += 0.5;\n\n\treturn score * weight;\n};\n\n\n/**\n * Cast object property to an array if it exists and has a value\n *\n */\nexport const propToArray = (obj:{[key:string]:any}, key:string) => {\n\tvar value = obj[key];\n\n\tif( typeof value == 'function' ) return value;\n\n\tif( value && !Array.isArray(value) ){\n\t\tobj[key] = [value];\n\t}\n}\n\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n\nexport const cmp = (a:number|string, b:number|string) => {\n\tif (typeof a === 'number' && typeof b === 'number') {\n\t\treturn a > b ? 1 : (a < b ? -1 : 0);\n\t}\n\ta = asciifold(a + '').toLowerCase();\n\tb = asciifold(b + '').toLowerCase();\n\tif (a > b) return 1;\n\tif (b > a) return -1;\n\treturn 0;\n};\n", "/**\n * sifter.js\n * Copyright (c) 2013–2020 Brian Reavis & contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n * @author Brian Reavis <brian@thirdroute.com>\n */\n\nimport { scoreValue, getAttr, getAttrNesting, propToArray, iterate, cmp } from './utils.ts';\nimport { getPattern, escape_regex } from '@orchidjs/unicode-variants';\nimport * as T from './types.ts';\n\nclass Sifter{\n\n\tpublic items: any; // []|{};\n\tpublic settings: T.Settings;\n\n\t/**\n\t * Textually searches arrays and hashes of objects\n\t * by property (or multiple properties). Designed\n\t * specifically for autocomplete.\n\t *\n\t */\n\tconstructor(items:any, settings:T.Settings) {\n\t\tthis.items = items;\n\t\tthis.settings = settings || {diacritics: true};\n\t};\n\n\t/**\n\t * Splits a search string into an array of individual\n\t * regexps to be used to match results.\n\t *\n\t */\n\ttokenize(query:string, respect_word_boundaries?:boolean, weights?:T.Weights ):T.Token[] {\n\t\tif (!query || !query.length) return [];\n\n\t\tconst tokens:T.Token[]\t= [];\n\t\tconst words\t\t\t\t= query.split(/\\s+/);\n\t\tvar field_regex:RegExp;\n\n\t\tif( weights ){\n\t\t\tfield_regex = new RegExp( '^('+ Object.keys(weights).map(escape_regex).join('|')+')\\:(.*)$');\n\t\t}\n\n\t\twords.forEach((word:string) => {\n\t\t\tlet field_match;\n\t\t\tlet field:null|string\t= null;\n\t\t\tlet regex:null|string\t= null;\n\n\t\t\t// look for \"field:query\" tokens\n\t\t\tif( field_regex && (field_match = word.match(field_regex)) ){\n\t\t\t\tfield\t= field_match[1]!;\n\t\t\t\tword\t= field_match[2]!;\n\t\t\t}\n\n\t\t\tif( word.length > 0 ){\n\t\t\t\tif( this.settings.diacritics ){\n\t\t\t\t\tregex = getPattern(word) || null;\n\t\t\t\t}else{\n\t\t\t\t\tregex = escape_regex(word);\n\t\t\t\t}\n\t\t\t\tif( regex && respect_word_boundaries ) regex = \"\\\\b\"+regex;\n\t\t\t}\n\n\t\t\ttokens.push({\n\t\t\t\tstring : word,\n\t\t\t\tregex  : regex ? new RegExp(regex,'iu') : null,\n\t\t\t\tfield  : field,\n\t\t\t});\n\t\t});\n\n\t\treturn tokens;\n\t};\n\n\n\t/**\n\t * Returns a function to be used to score individual results.\n\t *\n\t * Good matches will have a higher score than poor matches.\n\t * If an item is not a match, 0 will be returned by the function.\n\t *\n\t * @returns {T.ScoreFn}\n\t */\n\tgetScoreFunction(query:string, options:T.UserOptions ){\n\t\tvar search = this.prepareSearch(query, options);\n\t\treturn this._getScoreFunction(search);\n\t}\n\n\t/**\n\t * @returns {T.ScoreFn}\n\t *\n\t */\n\t_getScoreFunction(search:T.PrepareObj ){\n\t\tconst tokens\t\t= search.tokens,\n\t\ttoken_count\t\t\t= tokens.length;\n\n\t\tif (!token_count) {\n\t\t\treturn function() { return 0; };\n\t\t}\n\n\t\tconst fields\t= search.options.fields,\n\t\tweights\t\t\t= search.weights,\n\t\tfield_count\t\t= fields.length,\n\t\tgetAttrFn\t\t= search.getAttrFn;\n\n\t\tif (!field_count) {\n\t\t\treturn function() { return 1; };\n\t\t}\n\n\n\t\t/**\n\t\t * Calculates the score of an object\n\t\t * against the search query.\n\t\t *\n\t\t */\n\t\tconst scoreObject = (function() {\n\n\n\t\t\tif (field_count === 1) {\n\t\t\t\treturn function(token:T.Token, data:{}) {\n\t\t\t\t\tconst field = fields[0]!.field;\n\t\t\t\t\treturn scoreValue(getAttrFn(data, field), token, weights[field]||1);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn function(token:T.Token, data:{}) {\n\t\t\t\tvar sum = 0;\n\n\t\t\t\t// is the token specific to a field?\n\t\t\t\tif( token.field ){\n\n\t\t\t\t\tconst value = getAttrFn(data, token.field);\n\n\t\t\t\t\tif( !token.regex && value ){\n\t\t\t\t\t\tsum += (1/field_count);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tsum += scoreValue(value, token, 1);\n\t\t\t\t\t}\n\n\n\n\t\t\t\t}else{\n\t\t\t\t\titerate(weights, (weight:number, field:string) => {\n\t\t\t\t\t\tsum += scoreValue(getAttrFn(data, field), token, weight);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn sum / field_count;\n\t\t\t};\n\t\t})();\n\n\t\tif (token_count === 1) {\n\t\t\treturn function(data:{}) {\n\t\t\t\treturn scoreObject(tokens[0]!, data);\n\t\t\t};\n\t\t}\n\n\t\tif (search.options.conjunction === 'and') {\n\t\t\treturn function(data:{}) {\n\t\t\t\tvar score, sum = 0;\n\t\t\t\tfor( let token of tokens){\n\t\t\t\t\tscore = scoreObject(token, data);\n\t\t\t\t\tif (score <= 0) return 0;\n\t\t\t\t\tsum += score;\n\t\t\t\t}\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t} else {\n\t\t\treturn function(data:{}) {\n\t\t\t\tvar sum = 0;\n\t\t\t\titerate(tokens,(token:T.Token)=>{\n\t\t\t\t\tsum += scoreObject(token, data);\n\t\t\t\t});\n\t\t\t\treturn sum / token_count;\n\t\t\t};\n\t\t}\n\t};\n\n\t/**\n\t * Returns a function that can be used to compare two\n\t * results, for sorting purposes. If no sorting should\n\t * be performed, `null` will be returned.\n\t *\n\t * @return function(a,b)\n\t */\n\tgetSortFunction(query:string, options:T.UserOptions) {\n\t\tvar search  = this.prepareSearch(query, options);\n\t\treturn this._getSortFunction(search);\n\t}\n\n\t_getSortFunction(search:T.PrepareObj){\n\t\tvar implicit_score,\n\t\tsort_flds:T.Sort[]\t= [];\n\n\t\tconst self\t= this,\n\t\toptions\t\t= search.options,\n\t\tsort\t\t= (!search.query && options.sort_empty) ? options.sort_empty : options.sort;\n\n\n\t\tif( typeof sort == 'function' ){\n\t\t\treturn sort.bind(this);\n\t\t}\n\n\t\t/**\n\t\t * Fetches the specified sort field value\n\t\t * from a search result item.\n\t\t *\n\t\t */\n\t\tconst get_field = function(name:string, result:T.ResultItem):string|number {\n\t\t\tif (name === '$score') return result.score;\n\t\t\treturn search.getAttrFn(self.items[result.id], name);\n\t\t};\n\n\t\t// parse options\n\t\tif (sort) {\n\t\t\tfor( let s of sort ){\n\t\t\t\tif (search.query || s.field !== '$score') {\n\t\t\t\t\tsort_flds.push(s);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// the \"$score\" field is implied to be the primary\n\t\t// sort field, unless it's manually specified\n\t\tif (search.query) {\n\t\t\timplicit_score = true;\n\t\t\tfor( let fld of sort_flds ){\n\t\t\t\tif( fld.field === '$score' ){\n\t\t\t\t\timplicit_score = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (implicit_score) {\n\t\t\t\tsort_flds.unshift({field: '$score', direction: 'desc'});\n\t\t\t}\n\n\t\t// without a search.query, all items will have the same score\n\t\t} else {\n\t\t\tsort_flds = sort_flds.filter((fld) => fld.field !== '$score' );\n\t\t}\n\n\n\t\t// build function\n\t\tconst sort_flds_count = sort_flds.length;\n\t\tif (!sort_flds_count) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn function(a:T.ResultItem, b:T.ResultItem) {\n\t\t\tvar result, field;\n\t\t\tfor( let sort_fld of sort_flds ){\n\t\t\t\tfield = sort_fld.field;\n\n\t\t\t\tlet\tmultiplier = sort_fld.direction === 'desc' ? -1 : 1;\n\n\t\t\t\tresult = multiplier * cmp(\n\t\t\t\t\tget_field(field, a),\n\t\t\t\t\tget_field(field, b)\n\t\t\t\t);\n\t\t\t\tif (result) return result;\n\t\t\t}\n\t\t\treturn 0;\n\t\t};\n\n\t};\n\n\t/**\n\t * Parses a search query and returns an object\n\t * with tokens and fields ready to be populated\n\t * with results.\n\t *\n\t */\n\tprepareSearch(query:string, optsUser:T.UserOptions):T.PrepareObj {\n\t\tconst weights:T.Weights = {};\n\t\tvar options\t\t= Object.assign({},optsUser) as T.Options;\n\n\t\tpropToArray(options,'sort');\n\t\tpropToArray(options,'sort_empty');\n\n\t\t// convert fields to new format\n\t\tif( options.fields ){\n\t\t\tpropToArray(options,'fields');\n\t\t\tconst fields:T.Field[] = [];\n\t\t\toptions.fields.forEach((field:string|T.Field) => {\n\t\t\t\tif( typeof field == 'string' ){\n\t\t\t\t\tfield = {field:field,weight:1};\n\t\t\t\t}\n\t\t\t\tfields.push(field);\n\t\t\t\tweights[field.field] = ('weight' in field) ? field.weight : 1;\n\t\t\t});\n\t\t\toptions.fields = fields;\n\t\t}\n\n\n\t\treturn {\n\t\t\toptions\t\t: options as T.Options,\n\t\t\tquery\t\t: query.toLowerCase().trim(),\n\t\t\ttokens\t\t: this.tokenize(query, options.respect_word_boundaries, weights),\n\t\t\ttotal\t\t: 0,\n\t\t\titems\t\t: [],\n\t\t\tweights\t\t: weights,\n\t\t\tgetAttrFn\t: (options.nesting) ? getAttrNesting : getAttr,\n\t\t};\n\t};\n\n\t/**\n\t * Searches through all items and returns a sorted array of matches.\n\t *\n\t */\n\tsearch(query:string, options:T.UserOptions) : T.PrepareObj {\n\t\tvar self = this, score, search: T.PrepareObj;\n\n\t\tsearch  = this.prepareSearch(query, options);\n\t\toptions = search.options;\n\t\tquery   = search.query;\n\n\t\t// generate result scoring function\n\t\tconst fn_score:T.ScoreFn = options.score || self._getScoreFunction(search);\n\n\t\t// perform search and sort\n\t\tif (query.length) {\n\t\t\titerate(self.items, (item:T.ResultItem, id:string|number) => {\n\t\t\t\tscore = fn_score(item);\n\t\t\t\tif (options.filter === false || score > 0) {\n\t\t\t\t\tsearch.items.push({'score': score, 'id': id});\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\titerate(self.items, (_:T.ResultItem, id:string|number) => {\n\t\t\t\tsearch.items.push({'score': 1, 'id': id});\n\t\t\t});\n\t\t}\n\n\t\tconst fn_sort = self._getSortFunction(search);\n\t\tif (fn_sort) search.items.sort(fn_sort);\n\n\t\t// apply limits\n\t\tsearch.total = search.items.length;\n\t\tif (typeof options.limit === 'number') {\n\t\t\tsearch.items = search.items.slice(0, options.limit);\n\t\t}\n\n\t\treturn search;\n\t};\n}\n\nexport { Sifter, scoreValue, getAttr, getAttrNesting, propToArray, iterate, cmp, getPattern }\nexport * from './types.ts';\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * highlight v3 | MIT license | Johann Burkard <jb@eaio.com>\n * Highlights arbitrary terms in a node.\n *\n * - Modified by Marshal <beatgates@gmail.com> 2011-6-24 (added regex)\n * - Modified by Brian Reavis <brian@thirdroute.com> 2012-8-27 (cleanup)\n */\n\nimport {replaceNode} from '../vanilla.ts';\n\n\nexport const highlight = (element:HTMLElement, regex:string|RegExp) => {\n\n\tif( regex === null ) return;\n\n\t// convet string to regex\n\tif( typeof regex === 'string' ){\n\n\t\tif( !regex.length ) return;\n\t\tregex = new RegExp(regex, 'i');\n\t}\n\n\n\t// Wrap matching part of text node with highlighting <span>, e.g.\n\t// Soccer  ->  <span class=\"highlight\">Soc</span>cer  for regex = /soc/i\n\tconst highlightText = ( node:Text ):number => {\n\n\t\tvar match = node.data.match(regex);\n\t\tif( match && node.data.length > 0 ){\n\t\t\tvar spannode\t\t= document.createElement('span');\n\t\t\tspannode.className\t= 'highlight';\n\t\t\tvar middlebit\t\t= node.splitText(match.index as number);\n\n\t\t\tmiddlebit.splitText(match[0]!.length);\n\t\t\tvar middleclone\t\t= middlebit.cloneNode(true);\n\n\t\t\tspannode.appendChild(middleclone);\n\t\t\treplaceNode(middlebit, spannode);\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn 0;\n\t};\n\n\t// Recurse element node, looking for child text nodes to highlight, unless element\n\t// is childless, <script>, <style>, or already highlighted: <span class=\"hightlight\">\n\tconst highlightChildren = ( node:Element ):void => {\n\t\tif( node.nodeType === 1 && node.childNodes && !/(script|style)/i.test(node.tagName) && ( node.className !== 'highlight' || node.tagName !== 'SPAN' ) ){\n\t\t\tArray.from(node.childNodes).forEach(element => {\n\t\t\t\thighlightRecursive(element);\n\t\t\t});\n\t\t}\n\t};\n\n\n\tconst highlightRecursive = ( node:Node|Element ):number => {\n\n\t\tif( node.nodeType === 3 ){\n\t\t\treturn highlightText(node as Text);\n\t\t}\n\n\t\thighlightChildren(node as Element);\n\n\t\treturn 0;\n\t};\n\n\thighlightRecursive( element );\n};\n\n/**\n * removeHighlight fn copied from highlight v5 and\n * edited to remove with(), pass js strict mode, and use without jquery\n */\nexport const removeHighlight = (el:HTMLElement) => {\n\tvar elements = el.querySelectorAll(\"span.highlight\");\n\tArray.prototype.forEach.call(elements, function(el:HTMLElement){\n\t\tvar parent = el.parentNode as Node;\n\t\tparent.replaceChild(el.firstChild as Node, el);\n\t\tparent.normalize();\n\t});\n};\n", "export const KEY_A\t\t\t\t= 65;\nexport const KEY_RETURN\t\t\t= 13;\nexport const KEY_ESC\t\t\t= 27;\nexport const KEY_LEFT\t\t\t= 37;\nexport const KEY_UP\t\t\t\t= 38;\nexport const KEY_RIGHT\t\t\t= 39;\nexport const KEY_DOWN\t\t\t= 40;\nexport const KEY_BACKSPACE\t\t= 8;\nexport const KEY_DELETE\t\t\t= 46;\nexport const KEY_TAB\t\t\t= 9;\n\nexport const IS_MAC      \t\t= typeof navigator === 'undefined' ? false : /Mac/.test(navigator.userAgent);\nexport const KEY_SHORTCUT\t\t= IS_MAC ? 'metaKey' : 'ctrlKey'; // ctrl key or apple key for ma\n", "\nexport default {\n\toptions: [],\n\toptgroups: [],\n\n\tplugins: [],\n\tdelimiter: ',',\n\tsplitOn: null, // regexp or string for splitting up values from a paste command\n\tpersist: true,\n\tdiacritics: true,\n\tcreate: null,\n\tcreateOnBlur: false,\n\tcreateFilter: null,\n\thighlight: true,\n\topenOnFocus: true,\n\tshouldOpen: null,\n\tmaxOptions: 50,\n\tmaxItems: null,\n\thideSelected: null,\n\tduplicates: false,\n\taddPrecedence: false,\n\tselectOnTab: false,\n\tpreload: null,\n\tallowEmptyOption: false,\n\t//closeAfterSelect: false,\n\trefreshThrottle: 300,\n\n\n\tloadThrottle: 300,\n\tloadingClass: 'loading',\n\n\tdataAttr: null, //'data-data',\n\toptgroupField: 'optgroup',\n\tvalueField: 'value',\n\tlabelField: 'text',\n\tdisabledField: 'disabled',\n\toptgroupLabelField: 'label',\n\toptgroupValueField: 'value',\n\tlockOptgroupOrder: false,\n\n\tsortField: '$order',\n\tsearchField: ['text'],\n\tsearchConjunction: 'and',\n\n\tmode: null,\n\twrapperClass: 'ts-wrapper',\n\tcontrolClass: 'ts-control',\n\tdropdownClass: 'ts-dropdown',\n\tdropdownContentClass: 'ts-dropdown-content',\n\titemClass: 'item',\n\toptionClass: 'option',\n\n\tdropdownParent: null,\n\tcontrolInput: '<input type=\"text\" autocomplete=\"off\" size=\"1\" />',\n\n\tcopyClassesToDropdown: false,\n\n\tplaceholder: null,\n\thidePlaceholder: null,\n\n\tshouldLoad: function(query:string):boolean{\n\t\treturn query.length > 0;\n\t},\n\n\t/*\n\tload                 : null, // function(query, callback) { ... }\n\tscore                : null, // function(search) { ... }\n\tonInitialize         : null, // function() { ... }\n\tonChange             : null, // function(value) { ... }\n\tonItemAdd            : null, // function(value, $item) { ... }\n\tonItemRemove         : null, // function(value) { ... }\n\tonClear              : null, // function() { ... }\n\tonOptionAdd          : null, // function(value, data) { ... }\n\tonOptionRemove       : null, // function(value) { ... }\n\tonOptionClear        : null, // function() { ... }\n\tonOptionGroupAdd     : null, // function(id, data) { ... }\n\tonOptionGroupRemove  : null, // function(id) { ... }\n\tonOptionGroupClear   : null, // function() { ... }\n\tonDropdownOpen       : null, // function(dropdown) { ... }\n\tonDropdownClose      : null, // function(dropdown) { ... }\n\tonType               : null, // function(str) { ... }\n\tonDelete             : null, // function(values) { ... }\n\t*/\n\n\trender: {\n\t\t/*\n\t\titem: null,\n\t\toptgroup: null,\n\t\toptgroup_header: null,\n\t\toption: null,\n\t\toption_create: null\n\t\t*/\n\t}\n};\n", "import defaults from './defaults.ts';\nimport { hash_key, iterate } from './utils.ts';\nimport { TomOption, TomSettings, RecursivePartial } from './types/index.ts';\nimport { TomInput } from './types/index.ts';\n\n\nexport default function getSettings( input:TomInput, settings_user:RecursivePartial<TomSettings>):TomSettings{\n\tvar settings:TomSettings\t= Object.assign({}, defaults, settings_user);\n\n\tvar attr_data\t\t\t\t= settings.dataAttr;\n\tvar field_label\t\t\t\t= settings.labelField;\n\tvar field_value\t\t\t\t= settings.valueField;\n\tvar field_disabled\t\t\t= settings.disabledField;\n\tvar field_optgroup\t\t\t= settings.optgroupField;\n\tvar field_optgroup_label\t= settings.optgroupLabelField;\n\tvar field_optgroup_value\t= settings.optgroupValueField;\n\n\tvar tag_name\t\t\t\t= input.tagName.toLowerCase();\n\tvar placeholder\t\t\t\t= input.getAttribute('placeholder') || input.getAttribute('data-placeholder');\n\n\tif (!placeholder && !settings.allowEmptyOption) {\n\t\tlet option\t\t= input.querySelector('option[value=\"\"]');\n\t\tif( option ){\n\t\t\tplaceholder = option.textContent;\n\t\t}\n\n\t}\n\n\tvar settings_element:{\n\t\tplaceholder\t: null|string,\n\t\toptions\t\t: TomOption[],\n\t\toptgroups\t: TomOption[],\n\t\titems\t\t: string[],\n\t\tmaxItems\t: null|number,\n\t} = {\n\t\tplaceholder\t: placeholder,\n\t\toptions\t\t: [],\n\t\toptgroups\t: [],\n\t\titems\t\t: [],\n\t\tmaxItems\t: null,\n\t};\n\n\n\t/**\n\t * Initialize from a <select> element.\n\t *\n\t */\n\tvar init_select = () => {\n\t\tvar tagName;\n\t\tvar options = settings_element.options;\n\t\tvar optionsMap:{[key:string]:any} = {};\n\t\tvar group_count = 1;\n\t\tlet $order = 0;\n\n\t\tvar readData = (el:HTMLElement):TomOption => {\n\n\t\t\tvar data\t= Object.assign({},el.dataset); // get plain object from DOMStringMap\n\t\t\tvar json\t= attr_data && data[attr_data];\n\n\t\t\tif( typeof json === 'string' && json.length ){\n\t\t\t\tdata = Object.assign(data,JSON.parse(json));\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\tvar addOption = (option:HTMLOptionElement, group?:string) => {\n\n\t\t\tvar value = hash_key(option.value);\n\t\t\tif ( value == null ) return;\n\t\t\tif ( !value && !settings.allowEmptyOption) return;\n\n\t\t\t// if the option already exists, it's probably been\n\t\t\t// duplicated in another optgroup. in this case, push\n\t\t\t// the current group to the \"optgroup\" property on the\n\t\t\t// existing option so that it's rendered in both places.\n\t\t\tif (optionsMap.hasOwnProperty(value)) {\n\t\t\t\tif (group) {\n\t\t\t\t\tvar arr = optionsMap[value][field_optgroup];\n\t\t\t\t\tif (!arr) {\n\t\t\t\t\t\toptionsMap[value][field_optgroup] = group;\n\t\t\t\t\t} else if (!Array.isArray(arr)) {\n\t\t\t\t\t\toptionsMap[value][field_optgroup] = [arr, group];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tarr.push(group);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}else{\n\n\t\t\t\tvar option_data             = readData(option);\n\t\t\t\toption_data[field_label]    = option_data[field_label] || option.textContent;\n\t\t\t\toption_data[field_value]    = option_data[field_value] || value;\n\t\t\t\toption_data[field_disabled] = option_data[field_disabled] || option.disabled;\n\t\t\t\toption_data[field_optgroup] = option_data[field_optgroup] || group;\n\t\t\t\toption_data.$option\t\t\t= option;\n\t\t\t\toption_data.$order\t\t\t= option_data.$order || ++$order;\n\n\t\t\t\toptionsMap[value] = option_data;\n\t\t\t\toptions.push(option_data);\n\t\t\t}\n\n\t\t\tif( option.selected ){\n\t\t\t\tsettings_element.items.push(value);\n\t\t\t}\n\t\t};\n\n\t\tvar addGroup = ( optgroup:HTMLOptGroupElement ) => {\n\t\t\tvar id:string, optgroup_data\n\n\t\t\toptgroup_data\t\t\t\t\t\t\t= readData(optgroup);\n\t\t\toptgroup_data[field_optgroup_label]\t\t= optgroup_data[field_optgroup_label] || optgroup.getAttribute('label') || '';\n\t\t\toptgroup_data[field_optgroup_value]\t\t= optgroup_data[field_optgroup_value] || group_count++;\n\t\t\toptgroup_data[field_disabled]\t\t\t= optgroup_data[field_disabled] || optgroup.disabled;\n\t\t\toptgroup_data.$order\t\t\t\t\t= optgroup_data.$order || ++$order;\n\n\t\t\tsettings_element.optgroups.push(optgroup_data);\n\n\t\t\tid = optgroup_data[field_optgroup_value];\n\n\t\t\titerate(optgroup.children, (option)=>{\n\t\t\t\taddOption(option as HTMLOptionElement, id);\n\t\t\t});\n\n\t\t};\n\n\t\tsettings_element.maxItems = input.hasAttribute('multiple') ? null : 1;\n\n\t\titerate(input.children,(child)=>{\n\t\t\ttagName = child.tagName.toLowerCase();\n\t\t\tif (tagName === 'optgroup') {\n\t\t\t\taddGroup(child as HTMLOptGroupElement);\n\t\t\t} else if (tagName === 'option') {\n\t\t\t\taddOption(child as HTMLOptionElement);\n\t\t\t}\n\t\t});\n\n\t};\n\n\n\t/**\n\t * Initialize from a <input type=\"text\"> element.\n\t *\n\t */\n\tvar init_textbox = () => {\n\t\tconst data_raw = input.getAttribute(attr_data);\n\n\t\tif (!data_raw) {\n\t\t\tvar value = input.value.trim() || '';\n\t\t\tif (!settings.allowEmptyOption && !value.length) return;\n\t\t\tconst values = value.split(settings.delimiter);\n\n\t\t\titerate( values, (value) => {\n\t\t\t\tconst option:TomOption = {};\n\t\t\t\toption[field_label] = value;\n\t\t\t\toption[field_value] = value;\n\t\t\t\tsettings_element.options.push(option);\n\t\t\t});\n\t\t\tsettings_element.items = values;\n\t\t} else {\n\t\t\tsettings_element.options = JSON.parse(data_raw);\n\t\t\titerate( settings_element.options, (opt) => {\n\t\t\t\tsettings_element.items.push(opt[field_value]);\n\t\t\t});\n\t\t}\n\t};\n\n\n\tif (tag_name === 'select') {\n\t\tinit_select();\n\t} else {\n\t\tinit_textbox();\n\t}\n\n\treturn Object.assign( {}, defaults, settings_element, settings_user) as TomSettings;\n};\n", "\nimport MicroEvent from './contrib/microevent.ts';\nimport MicroPlugin from './contrib/microplugin.ts';\nimport { Sifter } from '@orchidjs/sifter';\nimport { escape_regex } from '@orchidjs/unicode-variants';\nimport { TomInput, TomArgObject, TomOption, TomOptions, TomCreateFilter, TomCreateCallback, TomItem, TomSettings, TomTemplateNames, TomClearFilter, RecursivePartial } from './types/index.ts';\nimport {highlight, removeHighlight} from './contrib/highlight.ts';\nimport * as constants from './constants.ts';\nimport getSettings from './getSettings.ts';\nimport {\n\thash_key,\n\tget_hash,\n\tescape_html,\n\tdebounce_events,\n\tgetSelection,\n\tpreventDefault,\n\taddEvent,\n\tloadDebounce,\n\ttimeout,\n\tisKeyDown,\n\tgetId,\n\taddSlashes,\n\tappend,\n\titerate\n} from './utils.ts';\n\nimport {\n\tgetDom,\n\tisHtmlString,\n\tescapeQuery,\n\ttriggerEvent,\n\tapplyCSS,\n\taddClasses,\n\tremoveClasses,\n\tparentMatch,\n\tgetTail,\n\tisEmptyObject,\n\tnodeIndex,\n\tsetAttr,\n\treplaceNode\n} from './vanilla.ts';\n\nvar instance_i = 0;\n\nexport default class TomSelect extends MicroPlugin(MicroEvent){\n\n\tpublic control_input\t\t\t: HTMLInputElement;\n\tpublic wrapper\t\t\t\t\t: HTMLElement;\n\tpublic dropdown\t\t\t\t\t: HTMLElement;\n\tpublic control\t\t\t\t\t: HTMLElement;\n\tpublic dropdown_content\t\t\t: HTMLElement;\n\tpublic focus_node\t\t\t\t: HTMLElement;\n\n\tpublic order\t\t\t\t\t: number = 0;\n\tpublic settings\t\t\t\t\t: TomSettings;\n\tpublic input\t\t\t\t\t: TomInput;\n\tpublic tabIndex\t\t\t\t\t: number;\n\tpublic is_select_tag\t\t\t: boolean;\n\tpublic rtl\t\t\t\t\t\t: boolean;\n\tprivate inputId\t\t\t\t\t: string;\n\n\tprivate _destroy\t\t\t\t!: () => void;\n\tpublic sifter\t\t\t\t\t: Sifter;\n\n\n\tpublic isOpen\t\t\t\t\t: boolean = false;\n\tpublic isDisabled\t\t\t\t: boolean = false;\n\tpublic isReadOnly\t\t\t\t: boolean = false;\n\tpublic isRequired\t\t\t\t: boolean;\n\tpublic isInvalid\t\t\t\t: boolean = false; // @deprecated 1.8\n\tpublic isValid\t\t\t\t\t: boolean = true;\n\tpublic isLocked\t\t\t\t\t: boolean = false;\n\tpublic isFocused\t\t\t\t: boolean = false;\n\tpublic isInputHidden\t\t\t: boolean = false;\n\tpublic isSetup\t\t\t\t\t: boolean = false;\n\tpublic ignoreFocus\t\t\t\t: boolean = false;\n\tpublic ignoreHover\t\t\t\t: boolean = false;\n\tpublic hasOptions\t\t\t\t: boolean = false;\n\tpublic currentResults\t\t\t?: ReturnType<Sifter['search']>;\n\tpublic lastValue\t\t\t\t: string = '';\n\tpublic caretPos\t\t\t\t\t: number = 0;\n\tpublic loading\t\t\t\t\t: number = 0;\n\tpublic loadedSearches\t\t\t: { [key: string]: boolean } = {};\n\n\tpublic activeOption\t\t\t\t: null|HTMLElement = null;\n\tpublic activeItems\t\t\t\t: TomItem[] = [];\n\n\tpublic optgroups\t\t\t\t: TomOptions = {};\n\tpublic options\t\t\t\t\t: TomOptions = {};\n\tpublic userOptions\t\t\t\t: {[key:string]:boolean} = {};\n\tpublic items\t\t\t\t\t: string[] = [];\n\n\tprivate refreshTimeout\t\t\t: null|number = null;\n\n\n\tconstructor( input_arg: string|TomInput, user_settings:RecursivePartial<TomSettings> ){\n\t\tsuper();\n\n\t\tinstance_i++;\n\n\t\tvar dir;\n\t\tvar input\t\t\t\t= getDom( input_arg ) as TomInput;\n\n\t\tif( input.tomselect ){\n\t\t\tthrow new Error('Tom Select already initialized on this element');\n\t\t}\n\n\n\t\tinput.tomselect\t\t\t= this;\n\n\n\t\t// detect rtl environment\n\t\tvar computedStyle\t\t= window.getComputedStyle && window.getComputedStyle(input, null);\n\t\tdir\t\t\t\t\t\t= computedStyle.getPropertyValue('direction');\n\n\t\t// setup default state\n\t\tconst settings\t\t\t= getSettings( input, user_settings );\n\t\tthis.settings\t\t\t= settings;\n\t\tthis.input\t\t\t\t= input;\n\t\tthis.tabIndex\t\t\t= input.tabIndex || 0;\n\t\tthis.is_select_tag\t\t= input.tagName.toLowerCase() === 'select';\n\t\tthis.rtl\t\t\t\t= /rtl/i.test(dir);\n\t\tthis.inputId\t\t\t= getId(input, 'tomselect-'+instance_i);\n\t\tthis.isRequired\t\t\t= input.required;\n\n\n\t\t// search system\n\t\tthis.sifter = new Sifter(this.options, {diacritics: settings.diacritics});\n\n\t\t// option-dependent defaults\n\t\tsettings.mode = settings.mode || (settings.maxItems === 1 ? 'single' : 'multi');\n\t\tif (typeof settings.hideSelected !== 'boolean') {\n\t\t\tsettings.hideSelected = settings.mode === 'multi';\n\t\t}\n\n\t\tif( typeof settings.hidePlaceholder !== 'boolean' ){\n\t\t\tsettings.hidePlaceholder = settings.mode !== 'multi';\n\t\t}\n\n\t\t// set up createFilter callback\n\t\tvar filter = settings.createFilter;\n\t\tif( typeof filter !== 'function' ){\n\n\t\t\tif( typeof filter === 'string' ){\n\t\t\t\tfilter = new RegExp(filter);\n\t\t\t}\n\n\t\t\tif( filter instanceof RegExp ){\n\t\t\t\tsettings.createFilter = (input: string) => (filter as RegExp).test(input);\n\t\t\t}else{\n\t\t\t\tsettings.createFilter = (value: string) => {\n\t\t\t\t\treturn this.settings.duplicates || !this.options[value];\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\n\t\tthis.initializePlugins(settings.plugins);\n\t\tthis.setupCallbacks();\n\t\tthis.setupTemplates();\n\n\n\t\t// Create all elements\n\t\tconst wrapper\t\t\t= getDom('<div>');\n\t\tconst control\t\t\t= getDom('<div>');\n\t\tconst dropdown\t\t\t= this._render('dropdown');\n\t\tconst dropdown_content\t= getDom(`<div role=\"listbox\" tabindex=\"-1\">`);\n\n\t\tconst classes\t\t\t= this.input.getAttribute('class') || '';\n\t\tconst inputMode\t\t\t= settings.mode;\n\n\t\tvar control_input: HTMLInputElement;\n\n\n\t\taddClasses( wrapper, settings.wrapperClass, classes, inputMode);\n\n\n\t\taddClasses(control,settings.controlClass);\n\t\tappend( wrapper, control );\n\n\n\t\taddClasses(dropdown, settings.dropdownClass, inputMode);\n\t\tif( settings.copyClassesToDropdown ){\n\t\t\taddClasses( dropdown, classes);\n\t\t}\n\n\n\t\taddClasses(dropdown_content, settings.dropdownContentClass);\n\t\tappend( dropdown, dropdown_content );\n\n\t\tgetDom( settings.dropdownParent || wrapper ).appendChild( dropdown );\n\n\n\t\t// default controlInput\n\t\tif( isHtmlString(settings.controlInput) ){\n\t\t\tcontrol_input\t\t= getDom(settings.controlInput ) as HTMLInputElement;\n\n\t\t\t// set attributes\n\t\t\tvar attrs = ['autocorrect','autocapitalize','autocomplete','spellcheck'];\n\t\t\titerate(attrs,(attr:string) => {\n\t\t\t\tif( input.getAttribute(attr) ){\n\t\t\t\t\tsetAttr(control_input,{[attr]:input.getAttribute(attr)});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tcontrol_input.tabIndex = -1;\n\t\t\tcontrol.appendChild( control_input );\n\t\t\tthis.focus_node\t\t= control_input;\n\n\t\t// dom element\n\t\t}else if( settings.controlInput ){\n\t\t\tcontrol_input\t\t= getDom( settings.controlInput ) as HTMLInputElement;\n\t\t\tthis.focus_node\t\t= control_input;\n\n\t\t}else{\n\t\t\tcontrol_input\t\t= getDom('<input/>') as HTMLInputElement;\n\t\t\tthis.focus_node\t\t= control;\n\t\t}\n\n\t\tthis.wrapper\t\t\t= wrapper;\n\t\tthis.dropdown\t\t\t= dropdown;\n\t\tthis.dropdown_content\t= dropdown_content;\n\t\tthis.control \t\t\t= control;\n\t\tthis.control_input\t\t= control_input;\n\n\t\tthis.setup();\n\t}\n\n\t/**\n\t * set up event bindings.\n\t *\n\t */\n\tsetup(){\n\n\t\tconst self = this;\n\t\tconst settings\t\t\t\t= self.settings;\n\t\tconst control_input\t\t\t= self.control_input;\n\t\tconst dropdown\t\t\t\t= self.dropdown;\n\t\tconst dropdown_content\t\t= self.dropdown_content;\n\t\tconst wrapper\t\t\t\t= self.wrapper;\n\t\tconst control\t\t\t\t= self.control;\n\t\tconst input\t\t\t\t\t= self.input;\n\t\tconst focus_node\t\t\t= self.focus_node;\n\t\tconst passive_event\t\t\t= { passive: true };\n\t\tconst listboxId\t\t\t\t= self.inputId +'-ts-dropdown';\n\n\n\t\tsetAttr(dropdown_content,{\n\t\t\tid: listboxId\n\t\t});\n\n\t\tsetAttr(focus_node,{\n\t\t\trole:'combobox',\n\t\t\t'aria-haspopup':'listbox',\n\t\t\t'aria-expanded':'false',\n\t\t\t'aria-controls':listboxId\n\t\t});\n\n\t\tconst control_id\t= getId(focus_node,self.inputId + '-ts-control');\n\t\tconst query\t\t\t= \"label[for='\"+escapeQuery(self.inputId)+\"']\";\n\t\tconst label\t\t\t= document.querySelector(query);\n\t\tconst label_click\t= self.focus.bind(self);\n\t\tif( label ){\n\t\t\taddEvent(label,'click', label_click );\n\t\t\tsetAttr(label,{for:control_id});\n\t\t\tconst label_id = getId(label,self.inputId+'-ts-label');\n\t\t\tsetAttr(focus_node,{'aria-labelledby':label_id});\n\t\t\tsetAttr(dropdown_content,{'aria-labelledby':label_id});\n\t\t}\n\n\t\twrapper.style.width = input.style.width;\n\n\t\tif (self.plugins.names.length) {\n\t\t\tconst classes_plugins = 'plugin-' + self.plugins.names.join(' plugin-');\n\t\t\taddClasses( [wrapper,dropdown], classes_plugins);\n\t\t}\n\n\t\tif ((settings.maxItems === null || settings.maxItems > 1) && self.is_select_tag ){\n\t\t\tsetAttr(input,{multiple:'multiple'});\n\t\t}\n\n\t\tif (settings.placeholder) {\n\t\t\tsetAttr(control_input,{placeholder:settings.placeholder});\n\t\t}\n\n\t\t// if splitOn was not passed in, construct it from the delimiter to allow pasting universally\n\t\tif (!settings.splitOn && settings.delimiter) {\n\t\t\tsettings.splitOn = new RegExp('\\\\s*' + escape_regex(settings.delimiter) + '+\\\\s*');\n\t\t}\n\n\t\t// debounce user defined load() if loadThrottle > 0\n\t\t// after initializePlugins() so plugins can create/modify user defined loaders\n\t\tif( settings.load && settings.loadThrottle ){\n\t\t\tsettings.load = loadDebounce(settings.load,settings.loadThrottle)\n\t\t}\n\n\t\taddEvent(dropdown,'mousemove', () => {\n\t\t\tself.ignoreHover = false;\n\t\t});\n\n\t\taddEvent(dropdown,'mouseenter', (e) => {\n\n\t\t\tvar target_match = parentMatch(e.target as HTMLElement, '[data-selectable]', dropdown);\n\t\t\tif( target_match ) self.onOptionHover( e as MouseEvent, target_match );\n\n\t\t}, {capture:true});\n\n\t\t// clicking on an option should select it\n\t\taddEvent(dropdown,'click',(evt) => {\n\t\t\tconst option = parentMatch(evt.target as HTMLElement, '[data-selectable]');\n\t\t\tif( option ){\n\t\t\t\tself.onOptionSelect( evt as MouseEvent, option );\n\t\t\t\tpreventDefault(evt,true);\n\t\t\t}\n\t\t});\n\n\t\taddEvent(control,'click', (evt) => {\n\n\t\t\tvar target_match = parentMatch( evt.target as HTMLElement, '[data-ts-item]', control);\n\t\t\tif( target_match && self.onItemSelect(evt as MouseEvent, target_match as TomItem) ){\n\t\t\t\tpreventDefault(evt,true);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// retain focus (see control_input mousedown)\n\t\t\tif( control_input.value != '' ){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tself.onClick();\n\t\t\tpreventDefault(evt,true);\n\t\t});\n\n\n\t\t// keydown on focus_node for arrow_down/arrow_up\n\t\taddEvent(focus_node,'keydown',\t\t(e) => self.onKeyDown(e as KeyboardEvent) );\n\n\t\t// keypress and input/keyup\n\t\taddEvent(control_input,'keypress',\t(e) => self.onKeyPress(e as KeyboardEvent) );\n\t\taddEvent(control_input,'input',\t\t(e) => self.onInput(e as KeyboardEvent) );\n\t\taddEvent(focus_node,'blur', \t\t(e) => self.onBlur(e as FocusEvent) );\n\t\taddEvent(focus_node,'focus',\t\t(e) => self.onFocus(e as MouseEvent) );\n\t\taddEvent(control_input,'paste',\t\t(e) => self.onPaste(e as MouseEvent) );\n\n\n\t\tconst doc_mousedown = (evt:Event) => {\n\n\t\t\t// blur if target is outside of this instance\n\t\t\t// dropdown is not always inside wrapper\n\t\t\tconst target = evt.composedPath()[0];\n\t\t\tif( !wrapper.contains(target as HTMLElement) && !dropdown.contains(target as HTMLElement) ){\n\t\t\t\tif (self.isFocused) {\n\t\t\t\t\tself.blur();\n\t\t\t\t}\n\t\t\t\tself.inputState();\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\t// retain focus by preventing native handling. if the\n\t\t\t// event target is the input it should not be modified.\n\t\t\t// otherwise, text selection within the input won't work.\n\t\t\t// Fixes bug #212 which is no covered by tests\n\t\t\tif( target == control_input && self.isOpen ){\n\t\t\t\tevt.stopPropagation();\n\n\t\t\t// clicking anywhere in the control should not blur the control_input (which would close the dropdown)\n\t\t\t}else{\n\t\t\t\tpreventDefault(evt,true);\n\t\t\t}\n\n\t\t};\n\n\t\tconst win_scroll = () => {\n\t\t\tif (self.isOpen) {\n\t\t\t\tself.positionDropdown();\n\t\t\t}\n\t\t};\n\n\n\t\taddEvent(document,'mousedown', doc_mousedown);\n\t\taddEvent(window,'scroll', win_scroll, passive_event);\n\t\taddEvent(window,'resize', win_scroll, passive_event);\n\n\t\tthis._destroy = () => {\n\t\t\tdocument.removeEventListener('mousedown',doc_mousedown);\n\t\t\twindow.removeEventListener('scroll',win_scroll);\n\t\t\twindow.removeEventListener('resize',win_scroll);\n\t\t\tif( label ) label.removeEventListener('click',label_click);\n\t\t};\n\n\t\t// store original html and tab index so that they can be\n\t\t// restored when the destroy() method is called.\n\t\tthis.revertSettings = {\n\t\t\tinnerHTML : input.innerHTML,\n\t\t\ttabIndex : input.tabIndex\n\t\t};\n\n\n\t\tinput.tabIndex = -1;\n\t\tinput.insertAdjacentElement('afterend', self.wrapper);\n\n\t\tself.sync(false);\n\t\tsettings.items = [];\n\t\tdelete settings.optgroups;\n\t\tdelete settings.options;\n\n\t\taddEvent(input,'invalid', () => {\n\t\t\tif( self.isValid ){\n\t\t\t\tself.isValid = false;\n\t\t\t\tself.isInvalid = true;\n\t\t\t\tself.refreshState();\n\t\t\t}\n\t\t});\n\n\t\tself.updateOriginalInput();\n\t\tself.refreshItems();\n\t\tself.close(false);\n\t\tself.inputState();\n\t\tself.isSetup = true;\n\n\t\tif( input.disabled ){\n\t\t\tself.disable();\n\t\t}else if( input.readOnly ){\n\t\t\tself.setReadOnly(true);\n\t\t}else{\n\t\t\tself.enable(); //sets tabIndex\n\t\t}\n\n\t\tself.on('change', this.onChange);\n\n\t\taddClasses(input,'tomselected','ts-hidden-accessible');\n\t\tself.trigger('initialize');\n\n\t\t// preload options\n\t\tif (settings.preload === true) {\n\t\t\tself.preload();\n\t\t}\n\n\t}\n\n\n\t/**\n\t * Register options and optgroups\n\t *\n\t */\n\tsetupOptions(options:TomOption[] = [], optgroups:TomOption[] = []){\n\n\t\t// build options table\n\t\tthis.addOptions(options);\n\n\n\t\t// build optgroup table\n\t\titerate( optgroups, (optgroup:TomOption) => {\n\t\t\tthis.registerOptionGroup(optgroup);\n\t\t});\n\t}\n\n\t/**\n\t * Sets up default rendering functions.\n\t */\n\tsetupTemplates() {\n\t\tvar self = this;\n\t\tvar field_label = self.settings.labelField;\n\t\tvar field_optgroup = self.settings.optgroupLabelField;\n\n\t\tvar templates = {\n\t\t\t'optgroup': (data:TomOption) => {\n\t\t\t\tlet optgroup = document.createElement('div');\n\t\t\t\toptgroup.className = 'optgroup';\n\t\t\t\toptgroup.appendChild(data.options);\n\t\t\t\treturn optgroup;\n\n\t\t\t},\n\t\t\t'optgroup_header': (data:TomOption, escape:typeof escape_html) => {\n\t\t\t\treturn '<div class=\"optgroup-header\">' + escape(data[field_optgroup]) + '</div>';\n\t\t\t},\n\t\t\t'option': (data:TomOption, escape:typeof escape_html) => {\n\t\t\t\treturn '<div>' + escape(data[field_label]) + '</div>';\n\t\t\t},\n\t\t\t'item': (data:TomOption, escape:typeof escape_html) => {\n\t\t\t\treturn '<div>' + escape(data[field_label]) + '</div>';\n\t\t\t},\n\t\t\t'option_create': (data:TomOption, escape:typeof escape_html) => {\n\t\t\t\treturn '<div class=\"create\">Add <strong>' + escape(data.input) + '</strong>&hellip;</div>';\n\t\t\t},\n\t\t\t'no_results':() => {\n\t\t\t\treturn '<div class=\"no-results\">No results found</div>';\n\t\t\t},\n\t\t\t'loading':() => {\n\t\t\t\treturn '<div class=\"spinner\"></div>';\n\t\t\t},\n\t\t\t'not_loading':() => {},\n\t\t\t'dropdown':() => {\n\t\t\t\treturn '<div></div>';\n\t\t\t}\n\t\t};\n\n\n\t\tself.settings.render = Object.assign({}, templates, self.settings.render);\n\t}\n\n\t/**\n\t * Maps fired events to callbacks provided\n\t * in the settings used when creating the control.\n\t */\n\tsetupCallbacks() {\n\t\tvar key, fn;\n\t\tvar callbacks:{[key:string]:string} = {\n\t\t\t'initialize'      : 'onInitialize',\n\t\t\t'change'          : 'onChange',\n\t\t\t'item_add'        : 'onItemAdd',\n\t\t\t'item_remove'     : 'onItemRemove',\n\t\t\t'item_select'     : 'onItemSelect',\n\t\t\t'clear'           : 'onClear',\n\t\t\t'option_add'      : 'onOptionAdd',\n\t\t\t'option_remove'   : 'onOptionRemove',\n\t\t\t'option_clear'    : 'onOptionClear',\n\t\t\t'optgroup_add'    : 'onOptionGroupAdd',\n\t\t\t'optgroup_remove' : 'onOptionGroupRemove',\n\t\t\t'optgroup_clear'  : 'onOptionGroupClear',\n\t\t\t'dropdown_open'   : 'onDropdownOpen',\n\t\t\t'dropdown_close'  : 'onDropdownClose',\n\t\t\t'type'            : 'onType',\n\t\t\t'load'            : 'onLoad',\n\t\t\t'focus'           : 'onFocus',\n\t\t\t'blur'            : 'onBlur'\n\t\t};\n\n\t\tfor (key in callbacks) {\n\n\t\t\tfn = this.settings[callbacks[key] as (keyof TomSettings)];\n\t\t\tif (fn) this.on(key, fn);\n\n\t\t}\n\t}\n\n\t/**\n\t * Sync the Tom Select instance with the original input or select\n\t *\n\t */\n\tsync(get_settings:boolean=true):void{\n\t\tconst self\t\t= this;\n\t\tconst settings\t= get_settings ? getSettings( self.input, {delimiter:self.settings.delimiter} as RecursivePartial<TomSettings> ) : self.settings;\n\n\t\tself.setupOptions(settings.options,settings.optgroups);\n\n\t\tself.setValue(settings.items||[],true); // silent prevents recursion\n\n\t\tself.lastQuery = null; // so updated options will be displayed in dropdown\n\t}\n\n\t/**\n\t * Triggered when the main control element\n\t * has a click event.\n\t *\n\t */\n\tonClick():void {\n\t\tvar self = this;\n\n\t\tif( self.activeItems.length > 0 ){\n\t\t\tself.clearActiveItems();\n\t\t\tself.focus();\n\t\t\treturn;\n\t\t}\n\n\t\tif( self.isFocused && self.isOpen ){\n\t\t\tself.blur();\n\t\t} else {\n\t\t\tself.focus();\n\t\t}\n\t}\n\n\t/**\n\t * @deprecated v1.7\n\t *\n\t */\n\tonMouseDown():void {}\n\n\t/**\n\t * Triggered when the value of the control has been changed.\n\t * This should propagate the event to the original DOM\n\t * input / select element.\n\t */\n\tonChange() {\n\t\ttriggerEvent(this.input, 'input');\n\t\ttriggerEvent(this.input, 'change');\n\t}\n\n\t/**\n\t * Triggered on <input> paste.\n\t *\n\t */\n\tonPaste(e:MouseEvent|KeyboardEvent):void {\n\t\tvar self = this;\n\n\t\tif( self.isInputHidden || self.isLocked ){\n\t\t\tpreventDefault(e);\n\t\t\treturn;\n\t\t}\n\n\t\t// If a regex or string is included, this will split the pasted\n\t\t// input and create Items for each separate value\n\t\tif( !self.settings.splitOn ){\n\t\t\treturn;\n\t\t}\n\n\t\t// Wait for pasted text to be recognized in value\n\t\tsetTimeout(() => {\n\t\t\tvar pastedText = self.inputValue();\n\t\t\tif( !pastedText.match(self.settings.splitOn)){\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tvar splitInput = pastedText.trim().split(self.settings.splitOn);\n\t\t\titerate( splitInput, (piece:string) => {\n\n\t\t\t\tconst hash = hash_key(piece);\n\t\t\t\tif( hash ){\n\t\t\t\t\tif( this.options[piece] ){\n\t\t\t\t\t\tself.addItem(piece);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tself.createItem(piece);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}, 0);\n\n\t}\n\n\t/**\n\t * Triggered on <input> keypress.\n\t *\n\t */\n\tonKeyPress(e:KeyboardEvent):void {\n\t\tvar self = this;\n\t\tif(self.isLocked){\n\t\t\tpreventDefault(e);\n\t\t\treturn;\n\t\t}\n\t\tvar character = String.fromCharCode(e.keyCode || e.which);\n\t\tif (self.settings.create && self.settings.mode === 'multi' && character === self.settings.delimiter) {\n\t\t\tself.createItem();\n\t\t\tpreventDefault(e);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * Triggered on <input> keydown.\n\t *\n\t */\n\tonKeyDown(e:KeyboardEvent):void {\n\t\tvar self = this;\n\n\t\tself.ignoreHover = true;\n\n\t\tif (self.isLocked) {\n\t\t\tif (e.keyCode !== constants.KEY_TAB) {\n\t\t\t\tpreventDefault(e);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.keyCode) {\n\n\t\t\t// ctrl+A: select all\n\t\t\tcase constants.KEY_A:\n\t\t\t\tif( isKeyDown(constants.KEY_SHORTCUT,e) ){\n\t\t\t\t\tif( self.control_input.value == '' ){\n\t\t\t\t\t\tpreventDefault(e);\n\t\t\t\t\t\tself.selectAll();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t// esc: close dropdown\n\t\t\tcase constants.KEY_ESC:\n\t\t\t\tif (self.isOpen) {\n\t\t\t\t\tpreventDefault(e,true);\n\t\t\t\t\tself.close();\n\t\t\t\t}\n\t\t\t\tself.clearActiveItems();\n\t\t\t\treturn;\n\n\t\t\t// down: open dropdown or move selection down\n\t\t\tcase constants.KEY_DOWN:\n\t\t\t\tif (!self.isOpen && self.hasOptions) {\n\t\t\t\t\tself.open();\n\t\t\t\t} else if (self.activeOption) {\n\t\t\t\t\tlet next = self.getAdjacent(self.activeOption, 1);\n\t\t\t\t\tif (next) self.setActiveOption(next);\n\t\t\t\t}\n\t\t\t\tpreventDefault(e);\n\t\t\t\treturn;\n\n\t\t\t// up: move selection up\n\t\t\tcase constants.KEY_UP:\n\t\t\t\tif (self.activeOption) {\n\t\t\t\t\tlet prev = self.getAdjacent(self.activeOption, -1);\n\t\t\t\t\tif (prev) self.setActiveOption(prev);\n\t\t\t\t}\n\t\t\t\tpreventDefault(e);\n\t\t\t\treturn;\n\n\t\t\t// return: select active option\n\t\t\tcase constants.KEY_RETURN:\n\t\t\t\tif( self.canSelect(self.activeOption) ){\n\t\t\t\t\tself.onOptionSelect(e,self.activeOption!);\n\t\t\t\t\tpreventDefault(e);\n\n\t\t\t\t// if the option_create=null, the dropdown might be closed\n\t\t\t\t}else if (self.settings.create && self.createItem()) {\n\t\t\t\t\tpreventDefault(e);\n\n\t\t\t\t// don't submit form when searching for a value\n\t\t\t\t}else if( document.activeElement == self.control_input && self.isOpen ){\n\t\t\t\t\tpreventDefault(e);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\n\t\t\t// left: modifiy item selection to the left\n\t\t\tcase constants.KEY_LEFT:\n\t\t\t\tself.advanceSelection(-1, e);\n\t\t\t\treturn;\n\n\t\t\t// right: modifiy item selection to the right\n\t\t\tcase constants.KEY_RIGHT:\n\t\t\t\tself.advanceSelection(1, e);\n\t\t\t\treturn;\n\n\t\t\t// tab: select active option and/or create item\n\t\t\tcase constants.KEY_TAB:\n\n\t\t\t\tif( self.settings.selectOnTab ){\n\t\t\t\t\tif( self.canSelect(self.activeOption) ){\n\t\t\t\t\t\tself.onOptionSelect(e,self.activeOption!);\n\n\t\t\t\t\t\t// prevent default [tab] behaviour of jump to the next field\n\t\t\t\t\t\t// if select isFull, then the dropdown won't be open and [tab] will work normally\n\t\t\t\t\t\tpreventDefault(e);\n\t\t\t\t\t}\n\t\t\t\t\tif (self.settings.create && self.createItem()) {\n\t\t\t\t\t\tpreventDefault(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\n\t\t\t// delete|backspace: delete items\n\t\t\tcase constants.KEY_BACKSPACE:\n\t\t\tcase constants.KEY_DELETE:\n\t\t\t\tself.deleteSelection(e);\n\t\t\t\treturn;\n\t\t}\n\n\t\t// don't enter text in the control_input when active items are selected\n\t\tif( self.isInputHidden && !isKeyDown(constants.KEY_SHORTCUT,e) ){\n\t\t\tpreventDefault(e);\n\t\t}\n\t}\n\n\t/**\n\t * Triggered on <input> keyup.\n\t *\n\t */\n\tonInput(e:MouseEvent|KeyboardEvent):void {\n\t\t\n\t\tif( this.isLocked ){\n\t\t\treturn;\n\t\t}\n\n\t\tconst value = this.inputValue();\n\t\tif( this.lastValue === value ) return;\n\t\tthis.lastValue = value;\n\t\t\n\t\tif( value == '' ){\n\t\t\tthis._onInput();\n\t\t\treturn;\n\t\t}\n\n\t\tif( this.refreshTimeout ){\n\t\t\twindow.clearTimeout(this.refreshTimeout);\n\t\t}\n\n\t\tthis.refreshTimeout = timeout(()=> {\n\t\t\tthis.refreshTimeout = null;\n\t\t\tthis._onInput();\n\t\t}, this.settings.refreshThrottle);\n\t}\n\n\t_onInput():void {\n\t\tconst value = this.lastValue;\n\n\t\tif( this.settings.shouldLoad.call(this,value) ){\n\t\t\tthis.load(value);\n\t\t}\n\n\t\tthis.refreshOptions();\n\t\tthis.trigger('type', value);\n\t}\n\n\t/**\n\t * Triggered when the user rolls over\n\t * an option in the autocomplete dropdown menu.\n\t *\n\t */\n\tonOptionHover( evt:MouseEvent|KeyboardEvent, option:HTMLElement ):void{\n\t\tif( this.ignoreHover ) return;\n\t\tthis.setActiveOption(option, false);\n\t}\n\n\t/**\n\t * Triggered on <input> focus.\n\t *\n\t */\n\tonFocus(e?:MouseEvent|KeyboardEvent):void {\n\t\tvar self = this;\n\t\tvar wasFocused = self.isFocused;\n\n\t\tif( self.isDisabled || self.isReadOnly ){\n\t\t\tself.blur();\n\t\t\tpreventDefault(e);\n\t\t\treturn;\n\t\t}\n\n\t\tif (self.ignoreFocus) return;\n\t\tself.isFocused = true;\n\t\tif( self.settings.preload === 'focus' ) self.preload();\n\n\t\tif (!wasFocused) self.trigger('focus');\n\n\t\tif (!self.activeItems.length) {\n\t\t\tself.inputState();\n\t\t\tself.refreshOptions(!!self.settings.openOnFocus);\n\t\t}\n\n\t\tself.refreshState();\n\t}\n\n\t/**\n\t * Triggered on <input> blur.\n\t *\n\t */\n\tonBlur(e?:FocusEvent):void {\n\n\t\tif( document.hasFocus() === false ) return;\n\n\t\tvar self = this;\n\t\tif (!self.isFocused) return;\n\t\tself.isFocused = false;\n\t\tself.ignoreFocus = false;\n\n\t\tvar deactivate = () => {\n\t\t\tself.close();\n\t\t\tself.setActiveItem();\n\t\t\tself.setCaret(self.items.length);\n\t\t\tself.trigger('blur');\n\t\t};\n\n\t\tif (self.settings.create && self.settings.createOnBlur) {\n\t\t\tself.createItem(null, deactivate);\n\t\t} else {\n\t\t\tdeactivate();\n\t\t}\n\t}\n\n\n\t/**\n\t * Triggered when the user clicks on an option\n\t * in the autocomplete dropdown menu.\n\t *\n\t */\n\tonOptionSelect( evt:MouseEvent|KeyboardEvent, option:HTMLElement ){\n\t\tvar value, self = this;\n\n\n\t\t// should not be possible to trigger a option under a disabled optgroup\n\t\tif( option.parentElement && option.parentElement.matches('[data-disabled]') ){\n\t\t\treturn;\n\t\t}\n\n\n\t\tif( option.classList.contains('create') ){\n\t\t\tself.createItem(null, () => {\n\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\tself.close();\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tvalue = option.dataset.value;\n\t\t\tif (typeof value !== 'undefined') {\n\t\t\t\tself.lastQuery = null;\n\t\t\t\tself.addItem(value);\n\t\t\t\tif (self.settings.closeAfterSelect) {\n\t\t\t\t\tself.close();\n\t\t\t\t}\n\n\t\t\t\tif( !self.settings.hideSelected && evt.type && /click/.test(evt.type) ){\n\t\t\t\t\tself.setActiveOption(option);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return true if the given option can be selected\n\t *\n\t */\n\tcanSelect(option:HTMLElement|null):boolean{\n\n\t\tif( this.isOpen && option && this.dropdown_content.contains(option) ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Triggered when the user clicks on an item\n\t * that has been selected.\n\t *\n\t */\n\tonItemSelect( evt?:MouseEvent, item?:TomItem ):boolean{\n\t\tvar self = this;\n\n\t\tif( !self.isLocked && self.settings.mode === 'multi' ){\n\t\t\tpreventDefault(evt);\n\t\t\tself.setActiveItem(item, evt);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Determines whether or not to invoke\n\t * the user-provided option provider / loader\n\t *\n\t * Note, there is a subtle difference between\n\t * this.canLoad() and this.settings.shouldLoad();\n\t *\n\t *\t- settings.shouldLoad() is a user-input validator.\n\t *\tWhen false is returned, the not_loading template\n\t *\twill be added to the dropdown\n\t *\n\t *\t- canLoad() is lower level validator that checks\n\t * \tthe Tom Select instance. There is no inherent user\n\t *\tfeedback when canLoad returns false\n\t *\n\t */\n\tcanLoad(value:string):boolean{\n\n\t\tif( !this.settings.load ) return false;\n\t\tif( this.loadedSearches.hasOwnProperty(value) ) return false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Invokes the user-provided option provider / loader.\n\t *\n\t */\n\tload(value:string):void {\n\t\tconst self = this;\n\n\t\tif( !self.canLoad(value) ) return;\n\n\t\taddClasses(self.wrapper,self.settings.loadingClass);\n\t\tself.loading++;\n\n\t\tconst callback = self.loadCallback.bind(self);\n\t\tself.settings.load.call(self, value, callback);\n\t}\n\n\t/**\n\t * Invoked by the user-provided option provider\n\t *\n\t */\n\tloadCallback( options:TomOption[], optgroups:TomOption[] ):void{\n\t\tconst self = this;\n\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\tself.lastQuery = null;\n\n\t\tself.clearActiveOption(); // when new results load, focus should be on first option\n\t\tself.setupOptions(options,optgroups);\n\n\t\tself.refreshOptions(self.isFocused && !self.isInputHidden);\n\n\t\tif (!self.loading) {\n\t\t\tremoveClasses(self.wrapper,self.settings.loadingClass);\n\t\t}\n\n\t\tself.trigger('load', options, optgroups);\n\t}\n\n\tpreload():void{\n\t\tvar classList = this.wrapper.classList;\n\t\tif( classList.contains('preloaded') ) return;\n\t\tclassList.add('preloaded');\n\t\tthis.load('');\n\t}\n\n\n\t/**\n\t * Sets the input field of the control to the specified value.\n\t *\n\t */\n\tsetTextboxValue(value:string = '') {\n\t\tvar input = this.control_input;\n\t\tvar changed = input.value !== value;\n\t\tif (changed) {\n\t\t\tinput.value = value;\n\t\t\ttriggerEvent(input,'update');\n\t\t\tthis.lastValue = value;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the value of the control. If multiple items\n\t * can be selected (e.g. <select multiple>), this returns\n\t * an array. If only one item can be selected, this\n\t * returns a string.\n\t *\n\t */\n\tgetValue():string|string[] {\n\n\t\tif( this.is_select_tag && this.input.hasAttribute('multiple')) {\n\t\t\treturn this.items;\n\t\t}\n\n\t\treturn this.items.join(this.settings.delimiter);\n\t}\n\n\t/**\n\t * Resets the selected items to the given value.\n\t *\n\t */\n\tsetValue( value:string|string[], silent?:boolean ):void{\n\t\tvar events = silent ? [] : ['change'];\n\n\t\tdebounce_events(this, events,() => {\n\t\t\tthis.clear(silent);\n\t\t\tthis.addItems(value, silent);\n\t\t});\n\t}\n\n\n\t/**\n\t * Resets the number of max items to the given value\n\t *\n\t */\n\tsetMaxItems(value:null|number){\n\t\tif(value === 0) value = null; //reset to unlimited items.\n\t\tthis.settings.maxItems = value;\n\t\tthis.refreshState();\n\t}\n\n\t/**\n\t * Sets the selected item.\n\t *\n\t */\n\tsetActiveItem( item?:TomItem, e?:MouseEvent|KeyboardEvent ){\n\t\tvar self = this;\n\t\tvar eventName;\n\t\tvar i, begin, end, swap;\n\t\tvar last;\n\n\t\tif (self.settings.mode === 'single') return;\n\n\t\t// clear the active selection\n\t\tif( !item ){\n\t\t\tself.clearActiveItems();\n\t\t\tif (self.isFocused) {\n\t\t\t\tself.inputState();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// modify selection\n\t\teventName = e && e.type.toLowerCase();\n\n\t\tif (eventName === 'click' && isKeyDown('shiftKey',e) && self.activeItems.length) {\n\t\t\tlast\t= self.getLastActive();\n\t\t\tbegin\t= Array.prototype.indexOf.call(self.control.children, last);\n\t\t\tend\t\t= Array.prototype.indexOf.call(self.control.children, item);\n\n\t\t\tif (begin > end) {\n\t\t\t\tswap  = begin;\n\t\t\t\tbegin = end;\n\t\t\t\tend   = swap;\n\t\t\t}\n\t\t\tfor (i = begin; i <= end; i++) {\n\t\t\t\titem = self.control.children[i] as TomItem;\n\t\t\t\tif (self.activeItems.indexOf(item) === -1) {\n\t\t\t\t\tself.setActiveItemClass(item);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpreventDefault(e);\n\t\t} else if ((eventName === 'click' && isKeyDown(constants.KEY_SHORTCUT,e) ) || (eventName === 'keydown' && isKeyDown('shiftKey',e))) {\n\t\t\tif( item.classList.contains('active') ){\n\t\t\t\tself.removeActiveItem( item );\n\t\t\t} else {\n\t\t\t\tself.setActiveItemClass(item);\n\t\t\t}\n\t\t} else {\n\t\t\tself.clearActiveItems();\n\t\t\tself.setActiveItemClass(item);\n\t\t}\n\n\t\t// ensure control has focus\n\t\tself.inputState();\n\t\tif (!self.isFocused) {\n\t\t\tself.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Set the active and last-active classes\n\t *\n\t */\n\tsetActiveItemClass( item:TomItem ){\n\t\tconst self = this;\n\t\tconst last_active = self.control.querySelector('.last-active');\n\t\tif( last_active ) removeClasses(last_active as HTMLElement,'last-active');\n\n\t\taddClasses(item,'active last-active');\n\t\tself.trigger('item_select', item);\n\t\tif( self.activeItems.indexOf(item) == -1 ){\n\t\t\tself.activeItems.push( item );\n\t\t}\n\t}\n\n\t/**\n\t * Remove active item\n\t *\n\t */\n\tremoveActiveItem( item:TomItem ){\n\t\tvar idx = this.activeItems.indexOf(item);\n\t\tthis.activeItems.splice(idx, 1);\n\t\tremoveClasses(item,'active');\n\t}\n\n\t/**\n\t * Clears all the active items\n\t *\n\t */\n\tclearActiveItems(){\n\t\tremoveClasses(this.activeItems,'active');\n\t\tthis.activeItems = [];\n\t}\n\n\t/**\n\t * Sets the selected item in the dropdown menu\n\t * of available options.\n\t *\n\t */\n\tsetActiveOption( option:null|HTMLElement,scroll:boolean=true ):void{\n\n\t\tif( option === this.activeOption ){\n\t\t\treturn;\n\t\t}\n\n\t\tthis.clearActiveOption();\n\t\tif( !option ) return;\n\n\t\tthis.activeOption = option;\n\t\tsetAttr(this.focus_node,{'aria-activedescendant':option.getAttribute('id')});\n\t\tsetAttr(option,{'aria-selected':'true'});\n\t\taddClasses(option,'active');\n\t\tif( scroll ) this.scrollToOption(option);\n\t}\n\n\t/**\n\t * Sets the dropdown_content scrollTop to display the option\n\t *\n\t */\n\tscrollToOption( option:null|HTMLElement, behavior?:string ):void{\n\n\t\tif( !option ) return;\n\n\t\tconst content\t\t= this.dropdown_content;\n\t\tconst height_menu\t= content.clientHeight;\n\t\tconst scrollTop\t\t= content.scrollTop || 0;\n\t\tconst height_item\t= option.offsetHeight;\n\t\tconst y\t\t\t\t= option.getBoundingClientRect().top - content.getBoundingClientRect().top + scrollTop;\n\n\t\tif (y + height_item > height_menu + scrollTop) {\n\t\t\tthis.scroll(y - height_menu + height_item, behavior);\n\n\t\t} else if (y < scrollTop) {\n\t\t\tthis.scroll(y, behavior);\n\t\t}\n\t}\n\n\t/**\n\t * Scroll the dropdown to the given position\n\t *\n\t */\n\tscroll( scrollTop:number, behavior?:string ):void{\n\t\tconst content = this.dropdown_content;\n\t\tif( behavior ){\n\t\t\tcontent.style.scrollBehavior = behavior;\n\t\t}\n\t\tcontent.scrollTop = scrollTop;\n\t\tcontent.style.scrollBehavior = '';\n\t}\n\n\t/**\n\t * Clears the active option\n\t *\n\t */\n\tclearActiveOption(){\n\t\tif( this.activeOption ){\n\t\t\tremoveClasses(this.activeOption,'active');\n\t\t\tsetAttr(this.activeOption,{'aria-selected':null});\n\t\t}\n\t\tthis.activeOption = null;\n\t\tsetAttr(this.focus_node,{'aria-activedescendant':null});\n\t}\n\n\n\t/**\n\t * Selects all items (CTRL + A).\n\t */\n\tselectAll() {\n\t\tconst self = this;\n\n\t\tif (self.settings.mode === 'single') return;\n\n\t\tconst activeItems = self.controlChildren();\n\n\t\tif( !activeItems.length ) return;\n\n\t\tself.inputState();\n\t\tself.close();\n\n\t\tself.activeItems = activeItems;\n\t\titerate( activeItems, (item:TomItem) => {\n\t\t\tself.setActiveItemClass(item);\n\t\t});\n\n\t}\n\n\t/**\n\t * Determines if the control_input should be in a hidden or visible state\n\t *\n\t */\n\tinputState(){\n\t\tvar self = this;\n\n\t\tif( !self.control.contains(self.control_input) ) return;\n\n\t\tsetAttr(self.control_input,{placeholder:self.settings.placeholder});\n\n\t\tif( self.activeItems.length > 0 || (!self.isFocused && self.settings.hidePlaceholder && self.items.length > 0) ){\n\t\t\tself.setTextboxValue();\n\t\t\tself.isInputHidden = true;\n\n\t\t}else{\n\n\t\t\tif( self.settings.hidePlaceholder && self.items.length > 0 ){\n\t\t\t\tsetAttr(self.control_input,{placeholder:''});\n\t\t\t}\n\t\t\tself.isInputHidden = false;\n\t\t}\n\n\t\tself.wrapper.classList.toggle('input-hidden', self.isInputHidden );\n\t}\n\n\t/**\n\t * Get the input value\n\t */\n\tinputValue(){\n\t\treturn this.control_input.value.trim();\n\t}\n\n\t/**\n\t * Gives the control focus.\n\t */\n\tfocus() {\n\t\tvar self = this;\n\t\tif( self.isDisabled || self.isReadOnly) return;\n\n\t\tself.ignoreFocus = true;\n\n\t\tif( self.control_input.offsetWidth ){\n\t\t\tself.control_input.focus();\n\t\t}else{\n\t\t\tself.focus_node.focus();\n\t\t}\n\n\t\tsetTimeout(() => {\n\t\t\tself.ignoreFocus = false;\n\t\t\tself.onFocus();\n\t\t}, 0);\n\t}\n\n\t/**\n\t * Forces the control out of focus.\n\t *\n\t */\n\tblur():void {\n\t\tthis.focus_node.blur();\n\t\tthis.onBlur();\n\t}\n\n\t/**\n\t * Returns a function that scores an object\n\t * to show how good of a match it is to the\n\t * provided query.\n\t *\n\t * @return {function}\n\t */\n\tgetScoreFunction(query:string) {\n\t\treturn this.sifter.getScoreFunction(query, this.getSearchOptions());\n\t}\n\n\t/**\n\t * Returns search options for sifter (the system\n\t * for scoring and sorting results).\n\t *\n\t * @see https://github.com/orchidjs/sifter.js\n\t * @return {object}\n\t */\n\tgetSearchOptions() {\n\t\tvar settings = this.settings;\n\t\tvar sort = settings.sortField;\n\t\tif (typeof settings.sortField === 'string') {\n\t\t\tsort = [{field: settings.sortField}];\n\t\t}\n\n\t\treturn {\n\t\t\tfields      : settings.searchField,\n\t\t\tconjunction : settings.searchConjunction,\n\t\t\tsort        : sort,\n\t\t\tnesting     : settings.nesting\n\t\t};\n\t}\n\n\t/**\n\t * Searches through available options and returns\n\t * a sorted array of matches.\n\t *\n\t */\n\tsearch(query:string) : ReturnType<Sifter['search']>{\n\t\tvar result, calculateScore;\n\t\tvar self     = this;\n\t\tvar options  = this.getSearchOptions();\n\n\t\t// validate user-provided result scoring function\n\t\tif ( self.settings.score ){\n\t\t\tcalculateScore = self.settings.score.call(self,query);\n\t\t\tif (typeof calculateScore !== 'function') {\n\t\t\t\tthrow new Error('Tom Select \"score\" setting must be a function that returns a function');\n\t\t\t}\n\t\t}\n\n\t\t// perform search\n\t\tif (query !== self.lastQuery) {\n\t\t\tself.lastQuery\t\t\t= query;\n\t\t\tresult\t\t\t\t\t= self.sifter.search(query, Object.assign(options, {score: calculateScore}));\n\t\t\tself.currentResults\t\t= result;\n\t\t} else {\n\t\t\tresult\t\t\t\t\t= Object.assign( {}, self.currentResults);\n\t\t}\n\n\t\t// filter out selected items\n\t\tif( self.settings.hideSelected ){\n\t\t\tresult.items = result.items.filter((item) => {\n\t\t\t\tlet hashed = hash_key(item.id);\n\t\t\t\treturn !(hashed && self.items.indexOf(hashed) !== -1 );\n\t\t\t});\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Refreshes the list of available options shown\n\t * in the autocomplete dropdown menu.\n\t *\n\t */\n\trefreshOptions( triggerDropdown:boolean = true ){\n\t\tvar i, j, k, n, optgroup, optgroups, html:DocumentFragment, has_create_option, active_group;\n\t\tvar create;\n\n\t\ttype Group = {fragment:DocumentFragment,order:number,optgroup:string}\n\t\tconst groups: {[key:string]:number} = {};\n\t\tconst groups_order:Group[]\t= [];\n\n\t\tvar self\t\t\t\t\t= this;\n\t\tvar query\t\t\t\t\t= self.inputValue();\n\t\tconst same_query\t\t\t= query === self.lastQuery || (query == '' && self.lastQuery == null);\n\t\tvar results\t\t\t\t\t= self.search(query);\n\t\tvar active_option:HTMLElement|null = null;\n\t\tvar show_dropdown\t\t\t= self.settings.shouldOpen || false;\n\t\tvar dropdown_content\t\t= self.dropdown_content;\n\n\n\t\tif( same_query ){\n\t\t\tactive_option\t\t\t= self.activeOption;\n\n\t\t\tif( active_option ){\n\t\t\t\tactive_group = active_option.closest('[data-group]') as HTMLElement;\n\t\t\t}\n\t\t}\n\n\t\t// build markup\n\t\tn = results.items.length;\n\t\tif (typeof self.settings.maxOptions === 'number') {\n\t\t\tn = Math.min(n, self.settings.maxOptions);\n\t\t}\n\n\t\tif( n > 0 ){\n\t\t\tshow_dropdown = true;\n\t\t}\n\n\t\t// get fragment for group and the position of the group in group_order\n\t\tconst getGroupFragment = (optgroup:string,order:number):[number,DocumentFragment] => {\n\n\t\t\tlet group_order_i = groups[optgroup];\n\n\t\t\tif( group_order_i !== undefined ){\n\t\t\t\tlet order_group = groups_order[group_order_i];\n\t\t\t\tif( order_group !== undefined ){\n\t\t\t\t\treturn [group_order_i,order_group.fragment];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet group_fragment = document.createDocumentFragment();\n\t\t\tgroup_order_i = groups_order.length;\n\t\t\tgroups_order.push({fragment:group_fragment,order,optgroup});\n\n\t\t\treturn [group_order_i,group_fragment]\n\t\t}\n\n\t\t// render and group available options individually\n\t\tfor (i = 0; i < n; i++) {\n\n\t\t\t// get option dom element\n\t\t\tlet item\t\t\t= results.items[i];\n\t\t\tif( !item ) continue;\n\n\t\t\tlet opt_value\t\t= item.id;\n\t\t\tlet option\t\t\t= self.options[opt_value];\n\n\t\t\tif( option === undefined ) continue;\n\n\t\t\tlet opt_hash\t\t= get_hash(opt_value);\n\t\t\tlet option_el\t\t= self.getOption(opt_hash,true) as HTMLElement;\n\n\t\t\t// toggle 'selected' class\n\t\t\tif( !self.settings.hideSelected ){\n\t\t\t\toption_el.classList.toggle('selected', self.items.includes(opt_hash) );\n\t\t\t}\n\n\t\t\toptgroup    = option[self.settings.optgroupField] || '';\n\t\t\toptgroups   = Array.isArray(optgroup) ? optgroup : [optgroup];\n\t\t\t\n\n\t\t\tfor (j = 0, k = optgroups && optgroups.length; j < k; j++) {\n\t\t\t\toptgroup = optgroups[j];\n\n\t\t\t\tlet order = option.$order;\n\t\t\t\tlet self_optgroup = self.optgroups[optgroup];\n\t\t\t\tif( self_optgroup === undefined ){\t\t\t\t\t\n\t\t\t\t\toptgroup = '';\n\t\t\t\t}else{\n\t\t\t\t\torder = self_optgroup.$order;\n\t\t\t\t}\n\n\t\t\t\tconst [group_order_i,group_fragment] = getGroupFragment(optgroup,order);\n\n\n\t\t\t\t// nodes can only have one parent, so if the option is in mutple groups, we need a clone\n\t\t\t\tif( j > 0 ){\n\t\t\t\t\toption_el = option_el.cloneNode(true) as HTMLElement;\n\t\t\t\t\tsetAttr(option_el,{id: option.$id+'-clone-'+j,'aria-selected':null});\n\t\t\t\t\toption_el.classList.add('ts-cloned');\n\t\t\t\t\tremoveClasses(option_el,'active');\n\n\n\t\t\t\t\t// make sure we keep the activeOption in the same group\n\t\t\t\t\tif( self.activeOption && self.activeOption.dataset.value == opt_value ){\n\t\t\t\t\t\tif( active_group && active_group.dataset.group === optgroup.toString() ){\n\t\t\t\t\t\t\tactive_option = option_el;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\n\t\t\t\t\n\t\t\t\tgroup_fragment.appendChild(option_el);\n\t\t\t\tif( optgroup != '' ){\n\t\t\t\t\tgroups[optgroup] = group_order_i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// sort optgroups\n\t\tif( self.settings.lockOptgroupOrder ){\n\t\t\tgroups_order.sort((a, b) => {\n\t\t\t\treturn a.order - b.order;\n\t\t\t});\n\t\t}\n\n\t\t// render optgroup headers & join groups\n\t\thtml = document.createDocumentFragment();\n\t\titerate( groups_order, (group_order:Group) => {\n\n\t\t\tlet group_fragment = group_order.fragment;\n\t\t\tlet optgroup = group_order.optgroup\n\n\t\t\tif( !group_fragment || !group_fragment.children.length ) return;\n\n\t\t\tlet group_heading = self.optgroups[optgroup];\n\n\t\t\tif( group_heading !== undefined ){\n\n\t\t\t\tlet group_options = document.createDocumentFragment();\n\t\t\t\tlet header = self.render('optgroup_header', group_heading);\n\t\t\t\tappend( group_options, header );\n\t\t\t\tappend( group_options, group_fragment );\n\n\t\t\t\tlet group_html = self.render('optgroup', {group:group_heading,options:group_options} );\n\n\t\t\t\tappend( html, group_html );\n\n\t\t\t} else {\n\t\t\t\tappend( html, group_fragment );\n\t\t\t}\n\t\t});\n\n\t\tdropdown_content.innerHTML = '';\n\t\tappend( dropdown_content, html );\n\n\t\t// highlight matching terms inline\n\t\tif (self.settings.highlight) {\n\t\t\tremoveHighlight( dropdown_content );\n\t\t\tif (results.query.length && results.tokens.length) {\n\t\t\t\titerate( results.tokens, (tok) => {\n\t\t\t\t\thighlight( dropdown_content, tok.regex);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// helper method for adding templates to dropdown\n\t\tvar add_template = (template:TomTemplateNames) => {\n\t\t\tlet content = self.render(template,{input:query});\n\t\t\tif( content ){\n\t\t\t\tshow_dropdown = true;\n\t\t\t\tdropdown_content.insertBefore(content, dropdown_content.firstChild);\n\t\t\t}\n\t\t\treturn content;\n\t\t};\n\n\n\t\t// add loading message\n\t\tif( self.loading ){\n\t\t\tadd_template('loading');\n\n\t\t// invalid query\n\t\t}else if( !self.settings.shouldLoad.call(self,query) ){\n\t\t\tadd_template('not_loading');\n\n\t\t// add no_results message\n\t\t}else if( results.items.length === 0 ){\n\t\t\tadd_template('no_results');\n\n\t\t}\n\n\n\n\t\t// add create option\n\t\thas_create_option = self.canCreate(query);\n\t\tif (has_create_option) {\n\t\t\tcreate = add_template('option_create');\n\t\t}\n\n\n\t\t// activate\n\t\tself.hasOptions = results.items.length > 0 || has_create_option;\n\t\tif( show_dropdown ){\n\n\t\t\tif (results.items.length > 0) {\n\n\t\t\t\tif( !active_option && self.settings.mode === 'single' && self.items[0] != undefined ){\n\t\t\t\t\tactive_option = self.getOption(self.items[0]);\n\t\t\t\t}\n\n\t\t\t\tif( !dropdown_content.contains(active_option)  ){\n\n\t\t\t\t\tlet active_index = 0;\n\t\t\t\t\tif( create && !self.settings.addPrecedence ){\n\t\t\t\t\t\tactive_index = 1;\n\t\t\t\t\t}\n\t\t\t\t\tactive_option = self.selectable()[active_index] as HTMLElement;\n\t\t\t\t}\n\n\t\t\t}else if( create ){\n\t\t\t\tactive_option = create;\n\t\t\t}\n\n\t\t\tif( triggerDropdown && !self.isOpen ){\n\t\t\t\tself.open();\n\t\t\t\tself.scrollToOption(active_option,'auto');\n\t\t\t}\n\t\t\tself.setActiveOption(active_option);\n\n\t\t}else{\n\t\t\tself.clearActiveOption();\n\t\t\tif( triggerDropdown && self.isOpen ){\n\t\t\t\tself.close(false); // if create_option=null, we want the dropdown to close but not reset the textbox value\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return list of selectable options\n\t *\n\t */\n\tselectable():NodeList{\n\t\treturn this.dropdown_content.querySelectorAll('[data-selectable]');\n\t}\n\n\n\n\t/**\n\t * Adds an available option. If it already exists,\n\t * nothing will happen. Note: this does not refresh\n\t * the options list dropdown (use `refreshOptions`\n\t * for that).\n\t *\n\t * Usage:\n\t *\n\t *   this.addOption(data)\n\t *\n\t */\n\taddOption( data:TomOption, user_created = false ):false|string {\n\t\tconst self = this;\n\n\t\t// @deprecated 1.7.7\n\t\t// use addOptions( array, user_created ) for adding multiple options\n\t\tif( Array.isArray(data) ){\n\t\t\tself.addOptions( data, user_created);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst key = hash_key(data[self.settings.valueField]);\n\t\tif( key === null || self.options.hasOwnProperty(key) ){\n\t\t\treturn false;\n\t\t}\n\n\t\tdata.$order\t\t\t= data.$order || ++self.order;\n\t\tdata.$id\t\t\t= self.inputId + '-opt-' + data.$order;\n\t\tself.options[key]\t= data;\n\t\tself.lastQuery\t\t= null;\n\n\t\tif( user_created ){\n\t\t\tself.userOptions[key] = user_created;\n\t\t\tself.trigger('option_add', key, data);\n\t\t}\n\n\t\treturn key;\n\t}\n\n\t/**\n\t * Add multiple options\n\t *\n\t */\n\taddOptions( data:TomOption[], user_created = false ):void{\n\t\titerate( data, (dat:TomOption) => {\n\t\t\tthis.addOption(dat, user_created);\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated 1.7.7\n\t */\n\tregisterOption( data:TomOption ):false|string {\n\t\treturn this.addOption(data);\n\t}\n\n\t/**\n\t * Registers an option group to the pool of option groups.\n\t *\n\t * @return {boolean|string}\n\t */\n\tregisterOptionGroup(data:TomOption) {\n\t\tvar key = hash_key(data[this.settings.optgroupValueField]);\n\n\t\tif ( key === null ) return false;\n\n\t\tdata.$order = data.$order || ++this.order;\n\t\tthis.optgroups[key] = data;\n\t\treturn key;\n\t}\n\n\t/**\n\t * Registers a new optgroup for options\n\t * to be bucketed into.\n\t *\n\t */\n\taddOptionGroup(id:string, data:TomOption) {\n\t\tvar hashed_id;\n\t\tdata[this.settings.optgroupValueField] = id;\n\n\t\tif( hashed_id = this.registerOptionGroup(data) ){\n\t\t\tthis.trigger('optgroup_add', hashed_id, data);\n\t\t}\n\t}\n\n\t/**\n\t * Removes an existing option group.\n\t *\n\t */\n\tremoveOptionGroup(id:string) {\n\t\tif (this.optgroups.hasOwnProperty(id)) {\n\t\t\tdelete this.optgroups[id];\n\t\t\tthis.clearCache();\n\t\t\tthis.trigger('optgroup_remove', id);\n\t\t}\n\t}\n\n\t/**\n\t * Clears all existing option groups.\n\t */\n\tclearOptionGroups() {\n\t\tthis.optgroups = {};\n\t\tthis.clearCache();\n\t\tthis.trigger('optgroup_clear');\n\t}\n\n\t/**\n\t * Updates an option available for selection. If\n\t * it is visible in the selected items or options\n\t * dropdown, it will be re-rendered automatically.\n\t *\n\t */\n\tupdateOption(value:string, data:TomOption) {\n\t\tconst self = this;\n\t\tvar item_new;\n\t\tvar index_item;\n\n\t\tconst value_old\t\t= hash_key(value);\n\t\tconst value_new\t\t= hash_key(data[self.settings.valueField]);\n\n\t\t// sanity checks\n\t\tif( value_old === null ) return;\n\n\t\tconst data_old\t\t= self.options[value_old];\n\n\t\tif( data_old == undefined ) return;\n\t\tif( typeof value_new !== 'string' ) throw new Error('Value must be set in option data');\n\n\n\t\tconst option\t\t= self.getOption(value_old);\n\t\tconst item\t\t\t= self.getItem(value_old);\n\n\n\t\tdata.$order = data.$order || data_old.$order;\n\t\tdelete self.options[value_old];\n\n\t\t// invalidate render cache\n\t\t// don't remove existing node yet, we'll remove it after replacing it\n\t\tself.uncacheValue(value_new);\n\n\t\tself.options[value_new] = data;\n\n\t\t// update the option if it's in the dropdown\n\t\tif( option ){\n\t\t\tif( self.dropdown_content.contains(option) ){\n\n\t\t\t\tconst option_new\t= self._render('option', data);\n\t\t\t\treplaceNode(option, option_new);\n\n\t\t\t\tif( self.activeOption === option ){\n\t\t\t\t\tself.setActiveOption(option_new);\n\t\t\t\t}\n\t\t\t}\n\t\t\toption.remove();\n\t\t}\n\n\t\t// update the item if we have one\n\t\tif( item ){\n\t\t\tindex_item = self.items.indexOf(value_old);\n\t\t\tif (index_item !== -1) {\n\t\t\t\tself.items.splice(index_item, 1, value_new);\n\t\t\t}\n\n\t\t\titem_new\t= self._render('item', data);\n\n\t\t\tif( item.classList.contains('active') ) addClasses(item_new,'active');\n\n\t\t\treplaceNode( item, item_new);\n\t\t}\n\n\t\t// invalidate last query because we might have updated the sortField\n\t\tself.lastQuery = null;\n\t}\n\n\t/**\n\t * Removes a single option.\n\t *\n\t */\n\tremoveOption(value:string, silent?:boolean):void {\n\t\tconst self = this;\n\t\tvalue = get_hash(value);\n\n\t\tself.uncacheValue(value);\n\n\t\tdelete self.userOptions[value];\n\t\tdelete self.options[value];\n\t\tself.lastQuery = null;\n\t\tself.trigger('option_remove', value);\n\t\tself.removeItem(value, silent);\n\t}\n\n\t/**\n\t * Clears all options.\n\t */\n\tclearOptions(filter?:TomClearFilter ) {\n\n\t\tconst boundFilter = (filter || this.clearFilter).bind(this);\n\n\t\tthis.loadedSearches\t\t= {};\n\t\tthis.userOptions\t\t= {};\n\t\tthis.clearCache();\n\n\t\tconst selected:TomOptions\t= {};\n\t\titerate(this.options,(option:TomOption,key:string)=>{\n\t\t\tif( boundFilter(option,key as string) ){\n\t\t\t\tselected[key] = option;\n\t\t\t}\n\t\t});\n\n\t\tthis.options = this.sifter.items = selected;\n\t\tthis.lastQuery = null;\n\t\tthis.trigger('option_clear');\n\t}\n\n\t/**\n\t * Used by clearOptions() to decide whether or not an option should be removed\n\t * Return true to keep an option, false to remove\n\t *\n\t */\n\tclearFilter(option:TomOption,value:string){\n\t\tif( this.items.indexOf(value) >= 0 ){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns the dom element of the option\n\t * matching the given value.\n\t *\n\t */\n\tgetOption(value:undefined|null|boolean|string|number, create:boolean=false):null|HTMLElement {\n\n\t\tconst hashed = hash_key(value);\n\t\tif( hashed === null ) return null;\n\n\t\tconst option = this.options[hashed];\n\t\tif( option != undefined ){\n\n\t\t\tif( option.$div ){\n\t\t\t\treturn option.$div;\n\t\t\t}\n\n\t\t\tif( create ){\n\t\t\t\treturn this._render('option', option);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the dom element of the next or previous dom element of the same type\n\t * Note: adjacent options may not be adjacent DOM elements (optgroups)\n\t *\n\t */\n\tgetAdjacent( option:null|HTMLElement, direction:number, type:string = 'option' ) : HTMLElement|null{\n\t\tvar self = this, all;\n\n\t\tif( !option ){\n\t\t\treturn null;\n\t\t}\n\n\t\tif( type == 'item' ){\n\t\t\tall\t\t\t= self.controlChildren();\n\t\t}else{\n\t\t\tall\t\t\t= self.dropdown_content.querySelectorAll('[data-selectable]');\n\t\t}\n\n\t\tfor( let i = 0; i < all.length; i++ ){\n\t\t\tif( all[i] != option ){\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif( direction > 0 ){\n\t\t\t\treturn all[i+1] as HTMLElement;\n\t\t\t}\n\n\t\t\treturn all[i-1] as HTMLElement;\n\t\t}\n\t\treturn null;\n\t}\n\n\n\t/**\n\t * Returns the dom element of the item\n\t * matching the given value.\n\t *\n\t */\n\tgetItem(item:string|TomItem|null):null|TomItem {\n\n\t\tif( typeof item == 'object' ){\n\t\t\treturn item;\n\t\t}\n\n\t\tvar value = hash_key(item);\n\t\treturn value !== null\n\t\t\t? this.control.querySelector(`[data-value=\"${addSlashes(value)}\"]`)\n\t\t\t: null;\n\t}\n\n\t/**\n\t * \"Selects\" multiple items at once. Adds them to the list\n\t * at the current caret position.\n\t *\n\t */\n\taddItems( values:string|string[], silent?:boolean ):void{\n\t\tvar self = this;\n\n\t\tvar items = Array.isArray(values) ? values : [values];\n\t\titems = items.filter(x => self.items.indexOf(x) === -1);\n\t\tconst last_item = items[items.length - 1];\n\t\titems.forEach(item => {\n\t\t\tself.isPending = (item !== last_item);\n\t\t\tself.addItem(item, silent);\n\t\t});\n\t}\n\n\t/**\n\t * \"Selects\" an item. Adds it to the list\n\t * at the current caret position.\n\t *\n\t */\n\taddItem( value:string, silent?:boolean ):void{\n\t\tvar events = silent ? [] : ['change','dropdown_close'];\n\n\t\tdebounce_events(this, events, () => {\n\t\t\tvar item, wasFull;\n\t\t\tconst self = this;\n\t\t \tconst inputMode = self.settings.mode;\n\t\t\tconst hashed = hash_key(value);\n\n\t\t\tif( hashed && self.items.indexOf(hashed) !== -1 ){\n\n\t\t\t\tif( inputMode === 'single' ){\n\t\t\t\t\tself.close();\n\t\t\t\t}\n\n\t\t\t\tif( inputMode === 'single' || !self.settings.duplicates ){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hashed === null || !self.options.hasOwnProperty(hashed)) return;\n\t\t\tif (inputMode === 'single') self.clear(silent);\n\t\t\tif (inputMode === 'multi' && self.isFull()) return;\n\n\t\t\titem = self._render('item', self.options[hashed]);\n\n\t\t\tif( self.control.contains(item) ){ // duplicates\n\t\t\t\titem = item.cloneNode(true) as HTMLElement;\n\t\t\t}\n\n\t\t\twasFull = self.isFull();\n\t\t\tself.items.splice(self.caretPos, 0, hashed);\n\t\t\tself.insertAtCaret(item);\n\n\t\t\tif (self.isSetup) {\n\n\t\t\t\t// update menu / remove the option (if this is not one item being added as part of series)\n\t\t\t\tif( !self.isPending && self.settings.hideSelected ){\n\t\t\t\t\tlet option = self.getOption(hashed);\n\t\t\t\t\tlet next = self.getAdjacent(option, 1);\n\t\t\t\t\tif( next ){\n\t\t\t\t\t\tself.setActiveOption(next);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// refreshOptions after setActiveOption(),\n\t\t\t\t// otherwise setActiveOption() will be called by refreshOptions() with the wrong value\n\t\t\t\tif( !self.isPending && !self.settings.closeAfterSelect ){\n\t\t\t\t\tself.refreshOptions(self.isFocused && inputMode !== 'single');\n\t\t\t\t}\n\n\t\t\t\t// hide the menu if the maximum number of items have been selected or no options are left\n\t\t\t\tif( self.settings.closeAfterSelect != false && self.isFull() ){\n\t\t\t\t\tself.close();\n\t\t\t\t} else if (!self.isPending) {\n\t\t\t\t\tself.positionDropdown();\n\t\t\t\t}\n\n\t\t\t\tself.trigger('item_add', hashed, item);\n\n\t\t\t\tif (!self.isPending) {\n\t\t\t\t\tself.updateOriginalInput({silent: silent});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!self.isPending || (!wasFull && self.isFull())) {\n\t\t\t\tself.inputState();\n\t\t\t\tself.refreshState();\n\t\t\t}\n\n\t\t});\n\t}\n\n\t/**\n\t * Removes the selected item matching\n\t * the provided value.\n\t *\n\t */\n\tremoveItem( item:string|TomItem|null=null, silent?:boolean ){\n\t\tconst self\t\t= this;\n\t\titem\t\t\t= self.getItem(item);\n\n\t\tif( !item ) return;\n\n\t\tvar i,idx;\n\t\tconst value\t= item.dataset.value;\n\t\ti = nodeIndex(item);\n\n\t\titem.remove();\n\t\tif( item.classList.contains('active') ){\n\t\t\tidx = self.activeItems.indexOf(item);\n\t\t\tself.activeItems.splice(idx, 1);\n\t\t\tremoveClasses(item,'active');\n\t\t}\n\n\t\tself.items.splice(i, 1);\n\t\tself.lastQuery = null;\n\t\tif (!self.settings.persist && self.userOptions.hasOwnProperty(value)) {\n\t\t\tself.removeOption(value, silent);\n\t\t}\n\n\t\tif (i < self.caretPos) {\n\t\t\tself.setCaret(self.caretPos - 1);\n\t\t}\n\n\t\tself.updateOriginalInput({silent: silent});\n\t\tself.refreshState();\n\t\tself.positionDropdown();\n\t\tself.trigger('item_remove', value, item);\n\n\t}\n\n\t/**\n\t * Invokes the `create` method provided in the\n\t * TomSelect options that should provide the data\n\t * for the new item, given the user input.\n\t *\n\t * Once this completes, it will be added\n\t * to the item list.\n\t *\n\t */\n\tcreateItem( input:null|string=null, callback:TomCreateCallback = ()=>{} ):boolean{\n\n\t\t// triggerDropdown parameter @deprecated 2.1.1\n\t\tif( arguments.length === 3 ){\n\t\t\tcallback = arguments[2];\n\t\t}\n\t\tif( typeof callback != 'function' ){\n\t\t\tcallback = () => {};\n\t\t}\n\n\t\tvar self  = this;\n\t\tvar caret = self.caretPos;\n\t\tvar output;\n\t\tinput = input || self.inputValue();\n\n\t\tif (!self.canCreate(input)) {\n\t\t\tcallback();\n\t\t\treturn false;\n\t\t}\n\n\t\tself.lock();\n\n\t\tvar created = false;\n\t\tvar create = (data?:boolean|TomOption) => {\n\t\t\tself.unlock();\n\n\t\t\tif (!data || typeof data !== 'object') return callback();\n\t\t\tvar value = hash_key(data[self.settings.valueField]);\n\t\t\tif( typeof value !== 'string' ){\n\t\t\t\treturn callback();\n\t\t\t}\n\n\t\t\tself.setTextboxValue();\n\t\t\tself.addOption(data,true);\n\t\t\tself.setCaret(caret);\n\t\t\tself.addItem(value);\n\t\t\tcallback(data);\n\t\t\tcreated = true;\n\t\t};\n\n\t\tif( typeof self.settings.create === 'function' ){\n\t\t\toutput = self.settings.create.call(this, input, create);\n\t\t}else{\n\t\t\toutput = {\n\t\t\t\t[self.settings.labelField]: input,\n\t\t\t\t[self.settings.valueField]: input,\n\t\t\t};\n\t\t}\n\n\t\tif( !created ){\n\t\t\tcreate(output);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Re-renders the selected item lists.\n\t */\n\trefreshItems() {\n\t\tvar self = this;\n\t\tself.lastQuery = null;\n\n\t\tif (self.isSetup) {\n\t\t\tself.addItems(self.items);\n\t\t}\n\n\t\tself.updateOriginalInput();\n\t\tself.refreshState();\n\t}\n\n\t/**\n\t * Updates all state-dependent attributes\n\t * and CSS classes.\n\t */\n\trefreshState() {\n\t\tconst self     = this;\n\n\t\tself.refreshValidityState();\n\n\t\tconst isFull\t= self.isFull();\n\t\tconst isLocked\t= self.isLocked;\n\n\t\tself.wrapper.classList.toggle('rtl',self.rtl);\n\n\n\t\tconst wrap_classList = self.wrapper.classList;\n\n\t\twrap_classList.toggle('focus', self.isFocused)\n\t\twrap_classList.toggle('disabled', self.isDisabled)\n\t\twrap_classList.toggle('readonly', self.isReadOnly)\n\t\twrap_classList.toggle('required', self.isRequired)\n\t\twrap_classList.toggle('invalid', !self.isValid)\n\t\twrap_classList.toggle('locked', isLocked)\n\t\twrap_classList.toggle('full', isFull)\n\t\twrap_classList.toggle('input-active', self.isFocused && !self.isInputHidden)\n\t\twrap_classList.toggle('dropdown-active', self.isOpen)\n\t\twrap_classList.toggle('has-options', isEmptyObject(self.options) )\n\t\twrap_classList.toggle('has-items', self.items.length > 0);\n\n\t}\n\n\n\t/**\n\t * Update the `required` attribute of both input and control input.\n\t *\n\t * The `required` property needs to be activated on the control input\n\t * for the error to be displayed at the right place. `required` also\n\t * needs to be temporarily deactivated on the input since the input is\n\t * hidden and can't show errors.\n\t */\n\trefreshValidityState() {\n\t\tvar self = this;\n\n\t\tif( !self.input.validity ){\n\t\t\treturn;\n\t\t}\n\n\t\tself.isValid = self.input.validity.valid;\n\t\tself.isInvalid = !self.isValid;\n\t}\n\n\t/**\n\t * Determines whether or not more items can be added\n\t * to the control without exceeding the user-defined maximum.\n\t *\n\t * @returns {boolean}\n\t */\n\tisFull() {\n\t\treturn this.settings.maxItems !== null && this.items.length >= this.settings.maxItems;\n\t}\n\n\t/**\n\t * Refreshes the original <select> or <input>\n\t * element to reflect the current state.\n\t *\n\t */\n\tupdateOriginalInput( opts:TomArgObject = {} ){\n\t\tconst self = this;\n\t\tvar option, label;\n\n\t\tconst empty_option = self.input.querySelector('option[value=\"\"]') as HTMLOptionElement;\n\n\t\tif( self.is_select_tag ){\n\n\t\t\tconst selected:HTMLOptionElement[]\t\t= [];\n\t\t\tconst has_selected:number\t\t\t\t= self.input.querySelectorAll('option:checked').length;\n\n\t\t\tfunction AddSelected(option_el:HTMLOptionElement|null, value:string, label:string):HTMLOptionElement{\n\n\t\t\t\tif( !option_el ){\n\t\t\t\t\toption_el = getDom('<option value=\"' + escape_html(value) + '\">' + escape_html(label) + '</option>') as HTMLOptionElement;\n\t\t\t\t}\n\n\t\t\t\t// don't move empty option from top of list\n\t\t\t\t// fixes bug in firefox https://bugzilla.mozilla.org/show_bug.cgi?id=1725293\n\t\t\t\tif( option_el != empty_option ){\n\t\t\t\t\tself.input.append(option_el);\n\t\t\t\t}\n\n\t\t\t\tselected.push(option_el);\n\n\t\t\t\t// marking empty option as selected can break validation\n\t\t\t\t// fixes https://github.com/orchidjs/tom-select/issues/303\n\t\t\t\tif( option_el != empty_option || has_selected > 0 ){\n\t\t\t\t\toption_el.selected = true;\n\t\t\t\t}\n\n\t\t\t\treturn option_el;\n\t\t\t}\n\n\t\t\t// unselect all selected options\n\t\t\tself.input.querySelectorAll('option:checked').forEach((option_el:Element) => {\n\t\t\t\t(<HTMLOptionElement>option_el).selected = false;\n\t\t\t});\n\n\n\t\t\t// nothing selected?\n\t\t\tif( self.items.length == 0 && self.settings.mode == 'single' ){\n\n\t\t\t\tAddSelected(empty_option, \"\", \"\");\n\n\t\t\t// order selected <option> tags for values in self.items\n\t\t\t}else{\n\n\t\t\t\tself.items.forEach((value)=>{\n\t\t\t\t\toption\t\t\t= self.options[value]!;\n\t\t\t\t\tlabel\t\t\t= option[self.settings.labelField] || '';\n\n\t\t\t\t\tif( selected.includes(option.$option) ){\n\t\t\t\t\t\tconst reuse_opt = self.input.querySelector(`option[value=\"${addSlashes(value)}\"]:not(:checked)`) as HTMLOptionElement;\n\t\t\t\t\t\tAddSelected(reuse_opt, value, label);\n\t\t\t\t\t}else{\n\t\t\t\t\t\toption.$option\t= AddSelected(option.$option, value, label);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else {\n\t\t\tself.input.value = self.getValue() as string;\n\t\t}\n\n\t\tif (self.isSetup) {\n\t\t\tif (!opts.silent) {\n\t\t\t\tself.trigger('change', self.getValue() );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows the autocomplete dropdown containing\n\t * the available options.\n\t */\n\topen() {\n\t\tvar self = this;\n\n\t\tif (self.isLocked || self.isOpen || (self.settings.mode === 'multi' && self.isFull())) return;\n\t\tself.isOpen = true;\n\t\tsetAttr(self.focus_node,{'aria-expanded': 'true'});\n\t\tself.refreshState();\n\t\tapplyCSS(self.dropdown,{visibility: 'hidden', display: 'block'});\n\t\tself.positionDropdown();\n\t\tapplyCSS(self.dropdown,{visibility: 'visible', display: 'block'});\n\t\tself.focus();\n\t\tself.trigger('dropdown_open', self.dropdown);\n\t}\n\n\t/**\n\t * Closes the autocomplete dropdown menu.\n\t */\n\tclose(setTextboxValue=true) {\n\t\tvar self = this;\n\t\tvar trigger = self.isOpen;\n\n\t\tif( setTextboxValue ){\n\n\t\t\t// before blur() to prevent form onchange event\n\t\t\tself.setTextboxValue();\n\n\t\t\tif (self.settings.mode === 'single' && self.items.length) {\n\t\t\t\tself.inputState();\n\t\t\t}\n\t\t}\n\n\t\tself.isOpen = false;\n\t\tsetAttr(self.focus_node,{'aria-expanded': 'false'});\n\t\tapplyCSS(self.dropdown,{display: 'none'});\n\t\tif( self.settings.hideSelected ){\n\t\t\tself.clearActiveOption();\n\t\t}\n\t\tself.refreshState();\n\n\t\tif (trigger) self.trigger('dropdown_close', self.dropdown);\n\t}\n\n\t/**\n\t * Calculates and applies the appropriate\n\t * position of the dropdown if dropdownParent = 'body'.\n\t * Otherwise, position is determined by css\n\t */\n\tpositionDropdown(){\n\n\t\tif( this.settings.dropdownParent !== 'body' ){\n\t\t\treturn;\n\t\t}\n\n\t\tvar context\t\t\t= this.control;\n\t\tvar rect\t\t\t= context.getBoundingClientRect();\n\t\tvar top\t\t\t\t= context.offsetHeight + rect.top  + window.scrollY;\n\t\tvar left\t\t\t= rect.left + window.scrollX;\n\n\n\t\tapplyCSS(this.dropdown,{\n\t\t\twidth : rect.width + 'px',\n\t\t\ttop   : top + 'px',\n\t\t\tleft  : left + 'px'\n\t\t});\n\n\t}\n\n\t/**\n\t * Resets / clears all selected items\n\t * from the control.\n\t *\n\t */\n\tclear(silent?:boolean) {\n\t\tvar self = this;\n\n\t\tif (!self.items.length) return;\n\n\t\tvar items = self.controlChildren();\n\t\titerate(items,(item:TomItem)=>{\n\t\t\tself.removeItem(item,true);\n\t\t});\n\n\t\tself.inputState();\n\t\tif( !silent ) self.updateOriginalInput();\n\t\tself.trigger('clear');\n\t}\n\n\t/**\n\t * A helper method for inserting an element\n\t * at the current caret position.\n\t *\n\t */\n\tinsertAtCaret(el:HTMLElement) {\n\t\tconst self\t\t= this;\n\t\tconst caret\t\t= self.caretPos;\n\t\tconst target\t= self.control;\n\n\t\ttarget.insertBefore(el, target.children[caret] || null);\n\t\tself.setCaret(caret + 1);\n\t}\n\n\t/**\n\t * Removes the current selected item(s).\n\t *\n\t */\n\tdeleteSelection(e:KeyboardEvent):boolean {\n\t\tvar direction, selection, caret, tail;\n\t\tvar self = this;\n\n\t\tdirection = (e && e.keyCode === constants.KEY_BACKSPACE) ? -1 : 1;\n\t\tselection = getSelection(self.control_input);\n\n\n\t\t// determine items that will be removed\n\t\tconst rm_items:TomItem[]\t= [];\n\n\t\tif (self.activeItems.length) {\n\n\t\t\ttail = getTail(self.activeItems, direction);\n\t\t\tcaret = nodeIndex(tail);\n\n\t\t\tif (direction > 0) { caret++; }\n\n\t\t\titerate(self.activeItems, (item:TomItem) => rm_items.push(item) );\n\n\t\t} else if ((self.isFocused || self.settings.mode === 'single') && self.items.length) {\n\t\t\tconst items = self.controlChildren();\n\t\t\tlet rm_item;\n\t\t\tif( direction < 0 && selection.start === 0 && selection.length === 0 ){\n\t\t\t\trm_item = items[self.caretPos - 1];\n\n\t\t\t}else if( direction > 0 && selection.start === self.inputValue().length ){\n\t\t\t\trm_item = items[self.caretPos];\n\t\t\t}\n\n\t\t\tif( rm_item !== undefined ){\n\t\t\t\trm_items.push( rm_item );\n\t\t\t}\n\t\t}\n\n\t\tif( !self.shouldDelete(rm_items,e) ){\n\t\t\treturn false;\n\t\t}\n\n\t\tpreventDefault(e,true);\n\n\t\t// perform removal\n\t\tif (typeof caret !== 'undefined') {\n\t\t\tself.setCaret(caret);\n\t\t}\n\n\t\twhile( rm_items.length ){\n\t\t\tself.removeItem(rm_items.pop());\n\t\t}\n\n\t\tself.inputState();\n\t\tself.positionDropdown();\n\t\tself.refreshOptions(false);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Return true if the items should be deleted\n\t */\n\tshouldDelete(items:TomItem[],evt:MouseEvent|KeyboardEvent){\n\n\t\tconst values = items.map(item => item.dataset.value);\n\n\t\t// allow the callback to abort\n\t\tif( !values.length || (typeof this.settings.onDelete === 'function' && this.settings.onDelete(values,evt) === false) ){\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Selects the previous / next item (depending on the `direction` argument).\n\t *\n\t * > 0 - right\n\t * < 0 - left\n\t *\n\t */\n\tadvanceSelection(direction:number, e?:MouseEvent|KeyboardEvent) {\n\t\tvar last_active, adjacent, self = this;\n\n\t\tif (self.rtl) direction *= -1;\n\t\tif( self.inputValue().length ) return;\n\n\n\t\t// add or remove to active items\n\t\tif( isKeyDown(constants.KEY_SHORTCUT,e) || isKeyDown('shiftKey',e) ){\n\n\t\t\tlast_active\t\t\t= self.getLastActive(direction);\n\t\t\tif( last_active ){\n\n\t\t\t\tif( !last_active.classList.contains('active') ){\n\t\t\t\t\tadjacent\t\t\t= last_active;\n\t\t\t\t}else{\n\t\t\t\t\tadjacent\t\t\t= self.getAdjacent(last_active,direction,'item');\n\t\t\t\t}\n\n\t\t\t// if no active item, get items adjacent to the control input\n\t\t\t}else if( direction > 0 ){\n\t\t\t\tadjacent\t\t\t= self.control_input.nextElementSibling;\n\t\t\t}else{\n\t\t\t\tadjacent\t\t\t= self.control_input.previousElementSibling;\n\t\t\t}\n\n\n\t\t\tif( adjacent ){\n\t\t\t\tif( adjacent.classList.contains('active') ){\n\t\t\t\t\tself.removeActiveItem(last_active);\n\t\t\t\t}\n\t\t\t\tself.setActiveItemClass(adjacent); // mark as last_active !! after removeActiveItem() on last_active\n\t\t\t}\n\n\t\t// move caret to the left or right\n\t\t}else{\n\t\t\tself.moveCaret(direction);\n\t\t}\n\t}\n\n\tmoveCaret(direction:number){}\n\n\t/**\n\t * Get the last active item\n\t *\n\t */\n\tgetLastActive(direction?:number){\n\n\t\tlet last_active = this.control.querySelector('.last-active');\n\t\tif( last_active ){\n\t\t\treturn last_active;\n\t\t}\n\n\n\t\tvar result = this.control.querySelectorAll('.active');\n\t\tif( result ){\n\t\t\treturn getTail(result,direction);\n\t\t}\n\t}\n\n\n\t/**\n\t * Moves the caret to the specified index.\n\t *\n\t * The input must be moved by leaving it in place and moving the\n\t * siblings, due to the fact that focus cannot be restored once lost\n\t * on mobile webkit devices\n\t *\n\t */\n\tsetCaret(new_pos:number) {\n\t\tthis.caretPos = this.items.length;\n\t}\n\n\t/**\n\t * Return list of item dom elements\n\t *\n\t */\n\tcontrolChildren():TomItem[]{\n\t\treturn Array.from( this.control.querySelectorAll('[data-ts-item]') ) as TomItem[];\n\t}\n\n\t/**\n\t * Disables user input on the control. Used while\n\t * items are being asynchronously created.\n\t */\n\tlock() {\n\t\tthis.setLocked(true);\n\t}\n\n\t/**\n\t * Re-enables user input on the control.\n\t */\n\tunlock() {\n\t\tthis.setLocked(false);\n\t}\n\n\t/**\n\t * Disable or enable user input on the control\n\t */\n\tsetLocked( lock:boolean = this.isReadOnly || this.isDisabled ){\n\t\tthis.isLocked = lock;\n\t\tthis.refreshState();\n\t}\n\n\t/**\n\t * Disables user input on the control completely.\n\t * While disabled, it cannot receive focus.\n\t */\n\tdisable() {\n\t\tthis.setDisabled(true);\n\t\tthis.close();\n\t}\n\n\t/**\n\t * Enables the control so that it can respond\n\t * to focus and user input.\n\t */\n\tenable() {\n\t\tthis.setDisabled(false);\n\t}\n\n\tsetDisabled(disabled:boolean){\n\t\tthis.focus_node.tabIndex\t\t= disabled ? -1 : this.tabIndex;\n\t\tthis.isDisabled\t\t\t\t\t= disabled;\n\t\tthis.input.disabled\t\t\t\t= disabled;\n\t\tthis.control_input.disabled\t\t= disabled;\n\t\tthis.setLocked();\n\t}\n\n\tsetReadOnly(isReadOnly:boolean){\n\t\tthis.isReadOnly\t\t\t\t\t= isReadOnly;\n\t\tthis.input.readOnly\t\t\t\t= isReadOnly;\n\t\tthis.control_input.readOnly\t\t= isReadOnly;\n\t\tthis.setLocked();\n\t}\n\n\t/**\n\t * Completely destroys the control and\n\t * unbinds all event listeners so that it can\n\t * be garbage collected.\n\t */\n\tdestroy() {\n\t\tvar self = this;\n\t\tvar revertSettings = self.revertSettings;\n\n\t\tself.trigger('destroy');\n\t\tself.off();\n\t\tself.wrapper.remove();\n\t\tself.dropdown.remove();\n\n\t\tself.input.innerHTML = revertSettings.innerHTML;\n\t\tself.input.tabIndex = revertSettings.tabIndex;\n\n\t\tremoveClasses(self.input,'tomselected','ts-hidden-accessible');\n\n\t\tself._destroy();\n\n\t\tdelete self.input.tomselect;\n\t}\n\n\t/**\n\t * A helper method for rendering \"item\" and\n\t * \"option\" templates, given the data.\n\t *\n\t */\n\trender( templateName:TomTemplateNames, data?:any ):null|HTMLElement{\n\t\tvar id, html;\n\t\tconst self = this;\n\n\t\tif( typeof this.settings.render[templateName] !== 'function' ){\n\t\t\treturn null;\n\t\t}\n\n\t\t// render markup\n\t\thtml = self.settings.render[templateName].call(this, data, escape_html);\n\n\t\tif( !html ){\n\t\t\treturn null;\n\t\t}\n\n\t\thtml = getDom( html );\n\n\t\t// add mandatory attributes\n\t\tif (templateName === 'option' || templateName === 'option_create') {\n\n\t\t\tif( data[self.settings.disabledField] ){\n\t\t\t\tsetAttr(html,{'aria-disabled':'true'});\n\t\t\t}else{\n\t\t\t\tsetAttr(html,{'data-selectable': ''});\n\t\t\t}\n\n\t\t}else if (templateName === 'optgroup') {\n\t\t\tid = data.group[self.settings.optgroupValueField];\n\t\t\tsetAttr(html,{'data-group': id});\n\t\t\tif(data.group[self.settings.disabledField]) {\n\t\t\t\tsetAttr(html,{'data-disabled': ''});\n\t\t\t}\n\t\t}\n\n\t\tif (templateName === 'option' || templateName === 'item') {\n\t\t\tconst value\t= get_hash(data[self.settings.valueField]);\n\t\t\tsetAttr(html,{'data-value': value });\n\n\n\t\t\t// make sure we have some classes if a template is overwritten\n\t\t\tif( templateName === 'item' ){\n\t\t\t\taddClasses(html,self.settings.itemClass);\n\t\t\t\tsetAttr(html,{'data-ts-item':''});\n\t\t\t}else{\n\t\t\t\taddClasses(html,self.settings.optionClass);\n\t\t\t\tsetAttr(html,{\n\t\t\t\t\trole:'option',\n\t\t\t\t\tid:data.$id\n\t\t\t\t});\n\n\t\t\t\t// update cache\n\t\t\t\tdata.$div = html;\n\t\t\t\tself.options[value] = data;\n\t\t\t}\n\n\n\t\t}\n\n\t\treturn html;\n\n\t}\n\n\n\t/**\n\t * Type guarded rendering\n\t *\n\t */\n\t_render( templateName:TomTemplateNames, data?:any ):HTMLElement{\n\t\tconst html = this.render(templateName, data);\n\n\t\tif( html == null ){\n\t\t\tthrow 'HTMLElement expected';\n\t\t}\n\t\treturn html;\n\t}\n\n\n\t/**\n\t * Clears the render cache for a template. If\n\t * no template is given, clears all render\n\t * caches.\n\t *\n\t */\n\tclearCache():void{\n\n\t\titerate(this.options, (option:TomOption)=>{\n\t\t\tif( option.$div ){\n\t\t\t\toption.$div.remove();\n\t\t\t\tdelete option.$div;\n\t\t\t}\n\t\t});\n\n\t}\n\n\t/**\n\t * Removes a value from item and option caches\n\t *\n\t */\n\tuncacheValue(value:string){\n\n\t\tconst option_el\t\t\t= this.getOption(value);\n\t\tif( option_el ) option_el.remove();\n\n\t}\n\n\t/**\n\t * Determines whether or not to display the\n\t * create item prompt, given a user input.\n\t *\n\t */\n\tcanCreate( input:string ):boolean {\n\t\treturn this.settings.create && (input.length > 0) && (this.settings.createFilter as TomCreateFilter ).call(this, input);\n\t}\n\n\n\t/**\n\t * Wraps this.`method` so that `new_fn` can be invoked 'before', 'after', or 'instead' of the original method\n\t *\n\t * this.hook('instead','onKeyDown',function( arg1, arg2 ...){\n\t *\n\t * });\n\t */\n\thook( when:string, method:string, new_fn:any ){\n\t\tvar self = this;\n\t\tvar orig_method = self[method];\n\n\n\t\tself[method] = function(){\n\t\t\tvar result, result_new;\n\n\t\t\tif( when === 'after' ){\n\t\t\t\tresult = orig_method.apply(self, arguments);\n\t\t\t}\n\n\t\t\tresult_new = new_fn.apply(self, arguments );\n\n\t\t\tif( when === 'instead' ){\n\t\t\t\treturn result_new;\n\t\t\t}\n\n\t\t\tif( when === 'before' ){\n\t\t\t\tresult = orig_method.apply(self, arguments);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t}\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "/**\n * Plugin: \"change_listener\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { addEvent } from '../../utils.ts';\n\nexport default function(this:TomSelect) {\n\taddEvent(this.input,'change',()=>{\n\t\tthis.sync();\n\t});\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"checkbox_options\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { TomTemplate } from '../../types/index.ts';\nimport { preventDefault, hash_key } from '../../utils.ts';\nimport { getDom } from '../../vanilla.ts';\nimport { CBOptions } from './types.ts';\n\n\nexport default function(this:TomSelect, userOptions:CBOptions) {\n\tvar self = this;\n\tvar orig_onOptionSelect = self.onOptionSelect;\n\n\tself.settings.hideSelected = false;\n\n\tconst cbOptions : CBOptions = Object.assign({\n\t\t// so that the user may add different ones as well\n\t\tclassName             : \"tomselect-checkbox\",\n\n\t\t// the following default to the historic plugin's values\n\t\tcheckedClassNames     : undefined,\n\t\tuncheckedClassNames   : undefined,\n\t}, userOptions);\n\n\n\tvar UpdateChecked = function(checkbox:HTMLInputElement, toCheck : boolean) {\n\t\tif( toCheck ){\n\t\t\tcheckbox.checked = true;\n\t\t\tif (cbOptions.uncheckedClassNames) {\n\t\t\t\tcheckbox.classList.remove(...cbOptions.uncheckedClassNames);\n\t\t\t}\n\t\t\tif (cbOptions.checkedClassNames) {\n\t\t\t\tcheckbox.classList.add(...cbOptions.checkedClassNames);\n\t\t\t}\n\t\t}else{\n\t\t\tcheckbox.checked = false;\n\t\t\tif (cbOptions.checkedClassNames) {\n\t\t\t\tcheckbox.classList.remove(...cbOptions.checkedClassNames);\n\t\t\t}\n\t\t\tif (cbOptions.uncheckedClassNames) {\n\t\t\t\tcheckbox.classList.add(...cbOptions.uncheckedClassNames);\n\t\t\t}\n\t\t}\n\t}\n\n\t// update the checkbox for an option\n\tvar UpdateCheckbox = function(option:HTMLElement){\n\t\tsetTimeout(()=>{\n\t\t\tvar checkbox = option.querySelector('input.' + cbOptions.className);\n\t\t\tif( checkbox instanceof HTMLInputElement ){\n\t\t\t\tUpdateChecked(checkbox, option.classList.contains('selected'));\n\t\t\t}\n\t\t},1);\n\t};\n\n\t// add checkbox to option template\n\tself.hook('after','setupTemplates',() => {\n\n\t\tvar orig_render_option = self.settings.render.option;\n\n\t\tself.settings.render.option = ((data, escape_html) => {\n\t\t\tvar rendered = getDom(orig_render_option.call(self, data, escape_html));\n\t\t\tvar checkbox = document.createElement('input');\n\t\t\tif (cbOptions.className) {\n\t\t\t\tcheckbox.classList.add(cbOptions.className);\n\t\t\t}\n\t\t\tcheckbox.addEventListener('click',function(evt){\n\t\t\t\tpreventDefault(evt);\n\t\t\t});\n\n\t\t\tcheckbox.type = 'checkbox';\n\t\t\tconst hashed = hash_key(data[self.settings.valueField]);\n\n\t\t\tUpdateChecked(checkbox, !!(hashed && self.items.indexOf(hashed) > -1) );\n\n\t\t\trendered.prepend(checkbox);\n\t\t\treturn rendered;\n\t\t}) satisfies TomTemplate;\n\t});\n\n\t// uncheck when item removed\n\tself.on('item_remove',(value:string) => {\n\t\tvar option = self.getOption(value);\n\n\t\tif( option ){ // if dropdown hasn't been opened yet, the option won't exist\n\t\t\toption.classList.remove('selected'); // selected class won't be removed yet\n\t\t\tUpdateCheckbox(option);\n\t\t}\n\t});\n\n\t// check when item added\n\tself.on('item_add',(value:string) => {\n\t\tvar option = self.getOption(value);\n\n\t\tif( option ){ // if dropdown hasn't been opened yet, the option won't exist\n\t\t\tUpdateCheckbox(option);\n\t\t}\n\t});\n\n\n\t// remove items when selected option is clicked\n\tself.hook('instead','onOptionSelect',( evt:KeyboardEvent, option:HTMLElement )=>{\n\n\t\tif( option.classList.contains('selected') ){\n\t\t\toption.classList.remove('selected')\n\t\t\tself.removeItem(option.dataset.value);\n\t\t\tself.refreshOptions();\n\t\t\tpreventDefault(evt,true);\n\t\t\treturn;\n        }\n\n\t\torig_onOptionSelect.call(self, evt, option);\n\n\t\tUpdateCheckbox(option);\n\t});\n\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"dropdown_header\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { getDom } from '../../vanilla.ts';\nimport { CBOptions } from './types.ts';\n\nexport default function(this:TomSelect, userOptions:CBOptions) {\n\tconst self = this;\n\n\tconst options = Object.assign({\n\t\tclassName: 'clear-button',\n\t\ttitle: 'Clear All',\n\t\thtml: (data:CBOptions) => {\n\t\t\treturn `<div class=\"${data.className}\" title=\"${data.title}\">&#10799;</div>`;\n\t\t}\n\t}, userOptions);\n\n\tself.on('initialize',()=>{\n\t\tvar button = getDom(options.html(options));\n\t\tbutton.addEventListener('click',(evt)=>{\n\n\t\t\tif( self.isLocked ) return;\n\n\t\t\tself.clear();\n\n\t\t\tif( self.settings.mode === 'single' && self.settings.allowEmptyOption ){\n\t\t\t\tself.addItem('');\n\t\t\t}\n\n\t\t\tevt.preventDefault();\n\t\t\tevt.stopPropagation();\n\t\t});\n\t\tself.control.appendChild(button);\n\t});\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"drag_drop\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { TomOption, TomItem } from '../../types/index.ts';\nimport { escape_html, preventDefault, addEvent } from '../../utils.ts';\nimport { getDom, setAttr } from '../../vanilla.ts';\n\n\nconst insertAfter = (referenceNode:Element, newNode:Element) => {\n\treferenceNode.parentNode?.insertBefore(newNode, referenceNode.nextSibling);\n}\n\nconst insertBefore = (referenceNode:Element, newNode:Element) => {\n\treferenceNode.parentNode?.insertBefore(newNode, referenceNode);\n}\n\nconst isBefore = (referenceNode:Element|undefined|null, newNode:Element|undefined|null) =>{\n\t\n\tdo{\n\t\tnewNode = newNode?.previousElementSibling;\n\n\t\tif( referenceNode == newNode ){\n\t\t\treturn true;\n\t\t}\n\n\t}while( newNode && newNode.previousElementSibling );\n\n\treturn false;\n}\n\nexport default function(this:TomSelect) {\n\tvar self = this;\n\tif (self.settings.mode !== 'multi') return;\n\n\tvar orig_lock\t\t= self.lock;\n\tvar orig_unlock\t\t= self.unlock;\n\tlet sortable = true;\n\t\tlet drag_item:TomItem|undefined;\n\n\n\t/**\n\t * Add draggable attribute to item\n\t */\n\tself.hook('after','setupTemplates',() => {\n\n\t\tvar orig_render_item = self.settings.render.item;\n\n\t\tself.settings.render.item = (data:TomOption, escape:typeof escape_html) => {\n\t\t\tconst item = getDom(orig_render_item.call(self, data, escape)) as TomItem;\n\t\t\tsetAttr(item,{'draggable':'true'});\n\n\n\t\t\t// prevent doc_mousedown (see tom-select.ts)\n\t\t\tconst mousedown = (evt:Event) => {\n\t\t\t\tif( !sortable ) preventDefault(evt);\n\t\t\t\tevt.stopPropagation();\n\t\t\t}\n\n\t\t\tconst dragStart = (evt:Event) => {\n\t\t\t\tdrag_item = item;\n\t\t\t\t\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\titem.classList.add('ts-dragging');\n\t\t\t\t}, 0);\n\t\t\t\t\n\t\t\t}\n\n\t\t\tconst dragOver = (evt:Event) =>{\n\t\t\t\tevt.preventDefault();\n\t\t\t\titem.classList.add('ts-drag-over');\n\t\t\t\tmoveitem(item,drag_item);\n\t\t\t}\n\n\t\t\tconst dragLeave = () => {\n\t\t\t\titem.classList.remove('ts-drag-over');\n\t\t\t}\n\n\t\t\tconst moveitem = (targetitem:TomItem, dragitem:TomItem|undefined) => {\n\t\t\t\tif( dragitem === undefined ) return;\n\t\t\t\t\n\t\t\t\tif( isBefore(dragitem,item) ){\n\t\t\t\t\tinsertAfter(targetitem,dragitem);\n\t\t\t\t}else{\n\t\t\t\t\tinsertBefore(targetitem,dragitem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst dragend = () => {\n\t\t\t\tdocument.querySelectorAll('.ts-drag-over').forEach(el=> el.classList.remove('ts-drag-over'));\n\t\t\t\tdrag_item?.classList.remove('ts-dragging');\n\t\t\t\tdrag_item = undefined;\n\n\t\t\t\tvar values:string[] = [];\n\t\t\t\tself.control.querySelectorAll(`[data-value]`).forEach((el:Element)=> {\n\t\t\t\t\tif( (<HTMLOptionElement>el).dataset.value ){\n\t\t\t\t\t\tlet value = (<HTMLOptionElement>el).dataset.value;\n\t\t\t\t\t\tif( value ){\n\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tself.setValue(values);\n\t\t\t}\t\n\n\n\t\t\taddEvent(item,'mousedown', mousedown);\n\t\t\taddEvent(item,'dragstart', dragStart);\n\t\t\taddEvent(item,'dragenter', dragOver)\n\t\t\taddEvent(item,'dragover', dragOver);\n\t\t\taddEvent(item,'dragleave', dragLeave);\n\t\t\taddEvent(item,'dragend', dragend);\n\t\t\t\t\n\t\t\treturn item;\n\t\t}\t\n\t});\n\n\n\n\tself.hook('instead','lock',()=>{\n\t\tsortable = false;\n\t\treturn orig_lock.call(self);\n\t});\n\n\tself.hook('instead','unlock',()=>{\n\t\tsortable = true;\n\t\treturn orig_unlock.call(self);\n\t});\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"dropdown_header\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { getDom } from '../../vanilla.ts';\nimport { preventDefault } from '../../utils.ts';\nimport { DHOptions } from './types.ts';\n\nexport default function(this:TomSelect, userOptions:DHOptions) {\n\tconst self = this;\n\n\tconst options = Object.assign({\n\t\ttitle         : 'Untitled',\n\t\theaderClass   : 'dropdown-header',\n\t\ttitleRowClass : 'dropdown-header-title',\n\t\tlabelClass    : 'dropdown-header-label',\n\t\tcloseClass    : 'dropdown-header-close',\n\n\t\thtml: (data:DHOptions) => {\n\t\t\treturn (\n\t\t\t\t'<div class=\"' + data.headerClass + '\">' +\n\t\t\t\t\t'<div class=\"' + data.titleRowClass + '\">' +\n\t\t\t\t\t\t'<span class=\"' + data.labelClass + '\">' + data.title + '</span>' +\n\t\t\t\t\t\t'<a class=\"' + data.closeClass + '\">&times;</a>' +\n\t\t\t\t\t'</div>' +\n\t\t\t\t'</div>'\n\t\t\t);\n\t\t}\n\t}, userOptions);\n\n\tself.on('initialize',()=>{\n\t\tvar header = getDom(options.html(options));\n\n\t\tvar close_link = header.querySelector('.'+options.closeClass);\n\t\tif( close_link ){\n\t\t\tclose_link.addEventListener('click',(evt)=>{\n\t\t\t\tpreventDefault(evt,true);\n\t\t\t\tself.close();\n\t\t\t});\n\t\t}\n\n\t\tself.dropdown.insertBefore(header, self.dropdown.firstChild);\n\t});\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"dropdown_input\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { nodeIndex, removeClasses } from '../../vanilla.ts';\n\n\nexport default function(this:TomSelect) {\n\tvar self = this;\n\n\t/**\n\t * Moves the caret to the specified index.\n\t *\n\t * The input must be moved by leaving it in place and moving the\n\t * siblings, due to the fact that focus cannot be restored once lost\n\t * on mobile webkit devices\n\t *\n\t */\n\tself.hook('instead','setCaret',(new_pos:number) => {\n\n\t\tif( self.settings.mode === 'single' || !self.control.contains(self.control_input) ) {\n\t\t\tnew_pos = self.items.length;\n\t\t} else {\n\t\t\tnew_pos = Math.max(0, Math.min(self.items.length, new_pos));\n\n\t\t\tif( new_pos != self.caretPos && !self.isPending ){\n\n\t\t\t\tself.controlChildren().forEach((child,j) => {\n\t\t\t\t\tif( j < new_pos ){\n\t\t\t\t\t\tself.control_input.insertAdjacentElement('beforebegin', child );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.control.appendChild( child );\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tself.caretPos = new_pos;\n\t});\n\n\tself.hook('instead','moveCaret',(direction:number) => {\n\n\t\tif( !self.isFocused ) return;\n\n\t\t// move caret before or after selected items\n\t\tconst last_active\t\t= self.getLastActive(direction);\n\t\tif( last_active ){\n\t\t\tconst idx = nodeIndex(last_active);\n\t\t\tself.setCaret(direction > 0 ? idx + 1: idx);\n\t\t\tself.setActiveItem();\n\t\t\tremoveClasses(last_active as HTMLElement,'last-active');\n\n\t\t// move caret left or right of current position\n\t\t}else{\n\t\t\tself.setCaret(self.caretPos + direction);\n\n\t\t}\n\n\t});\n\n};\n", "export const KEY_A\t\t\t\t= 65;\nexport const KEY_RETURN\t\t\t= 13;\nexport const KEY_ESC\t\t\t= 27;\nexport const KEY_LEFT\t\t\t= 37;\nexport const KEY_UP\t\t\t\t= 38;\nexport const KEY_RIGHT\t\t\t= 39;\nexport const KEY_DOWN\t\t\t= 40;\nexport const KEY_BACKSPACE\t\t= 8;\nexport const KEY_DELETE\t\t\t= 46;\nexport const KEY_TAB\t\t\t= 9;\n\nexport const IS_MAC      \t\t= typeof navigator === 'undefined' ? false : /Mac/.test(navigator.userAgent);\nexport const KEY_SHORTCUT\t\t= IS_MAC ? 'metaKey' : 'ctrlKey'; // ctrl key or apple key for ma\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"dropdown_input\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport * as constants from '../../constants.ts';\nimport { getDom, addClasses } from '../../vanilla.ts';\nimport { addEvent, preventDefault } from '../../utils.ts';\n\n\nexport default function(this:TomSelect) {\n\tconst self = this;\n\n\tself.settings.shouldOpen = true; // make sure the input is shown even if there are no options to display in the dropdown\n\n\tself.hook('before','setup',()=>{\n\t\tself.focus_node\t\t= self.control;\n\n\t\taddClasses( self.control_input, 'dropdown-input');\n\n\t \tconst div = getDom('<div class=\"dropdown-input-wrap\">');\n\t\tdiv.append(self.control_input);\n\t\tself.dropdown.insertBefore(div, self.dropdown.firstChild);\n\n\t\t// set a placeholder in the select control\n\t\tconst placeholder = getDom('<input class=\"items-placeholder\" tabindex=\"-1\" />') as HTMLInputElement;\n\t\tplaceholder.placeholder = self.settings.placeholder ||'';\n\t\tself.control.append(placeholder);\n\n\t});\n\n\n\tself.on('initialize',()=>{\n\n\t\t// set tabIndex on control to -1, otherwise [shift+tab] will put focus right back on control_input\n\t\tself.control_input.addEventListener('keydown',(evt:KeyboardEvent) =>{\n\t\t//addEvent(self.control_input,'keydown' as const,(evt:KeyboardEvent) =>{\n\t\t\tswitch( evt.keyCode ){\n\t\t\t\tcase constants.KEY_ESC:\n\t\t\t\t\tif (self.isOpen) {\n\t\t\t\t\t\tpreventDefault(evt,true);\n\t\t\t\t\t\tself.close();\n\t\t\t\t\t}\n\t\t\t\t\tself.clearActiveItems();\n\t\t\t\treturn;\n\t\t\t\tcase constants.KEY_TAB:\n\t\t\t\t\tself.focus_node.tabIndex = -1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn self.onKeyDown.call(self,evt);\n\t\t});\n\n\t\tself.on('blur',()=>{\n\t\t\tself.focus_node.tabIndex = self.isDisabled ? -1 : self.tabIndex;\n\t\t});\n\n\n\t\t// give the control_input focus when the dropdown is open\n\t\tself.on('dropdown_open',() =>{\n\t\t\tself.control_input.focus();\n\t\t});\n\n\t\t// prevent onBlur from closing when focus is on the control_input\n\t\tconst orig_onBlur = self.onBlur;\n\t\tself.hook('instead','onBlur',(evt?:FocusEvent)=>{\n\t\t\tif( evt && evt.relatedTarget == self.control_input ) return;\n\t\t\treturn orig_onBlur.call(self);\n\t\t});\n\n\t\taddEvent(self.control_input,'blur', () => self.onBlur() );\n\n\t\t// return focus to control to allow further keyboard input\n\t\tself.hook('before','close',() =>{\n\n\t\t\tif( !self.isOpen ) return;\n\t\t\tself.focus_node.focus({preventScroll: true});\n\t\t});\n\n\t});\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "/**\n * Plugin: \"input_autogrow\" (Tom Select)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { addEvent } from '../../utils.ts';\n\nexport default function(this:TomSelect) {\n\tvar self\t\t\t\t\t= this;\n\n\tself.on('initialize',()=>{\n\n\n\t\tvar test_input\t\t\t\t= document.createElement('span');\n\t\tvar control\t\t\t\t\t= self.control_input;\n\t\ttest_input.style.cssText\t= 'position:absolute; top:-99999px; left:-99999px; width:auto; padding:0; white-space:pre; ';\n\n\t\tself.wrapper.appendChild(test_input);\n\n\n\t\tvar transfer_styles\t\t\t= [ 'letterSpacing', 'fontSize', 'fontFamily', 'fontWeight', 'textTransform' ];\n\n\t\tfor( const style_name of transfer_styles ){\n\t\t\t// @ts-ignore TS7015 https://stackoverflow.com/a/50506154/697576\n\t\t\ttest_input.style[style_name] = control.style[style_name];\n\t\t}\n\n\n\t\t/**\n\t\t * Set the control width\n\t\t *\n\t\t */\n\t\tvar resize = ()=>{\n\t\t\ttest_input.textContent\t= control.value;\n\t\t\tcontrol.style.width\t\t= test_input.clientWidth+'px';\n\t\t};\n\n\t\tresize();\n\t\tself.on('update item_add item_remove',resize);\n\t\taddEvent(control,'input', resize );\n\t\taddEvent(control,'keyup', resize );\n\t\taddEvent(control,'blur', resize );\n\t\taddEvent(control,'update', resize );\n\t});\n\n};\n", "/**\n * Plugin: \"input_autogrow\" (Tom Select)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\n\nexport default function(this:TomSelect) {\n\tvar self = this;\n\tvar orig_deleteSelection = self.deleteSelection;\n\n\tthis.hook('instead','deleteSelection',(evt:KeyboardEvent) => {\n\n\t\tif( self.activeItems.length ){\n\t\t\treturn orig_deleteSelection.call(self, evt);\n\t\t}\n\n\t\treturn false;\n\t});\n\n};\n", "/**\n * Plugin: \"no_active_items\" (Tom Select)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\n\nexport default function(this:TomSelect) {\n\tthis.hook('instead','setActiveItem',() => {});\n\tthis.hook('instead','selectAll',() => {});\n};\n", "export const KEY_A\t\t\t\t= 65;\nexport const KEY_RETURN\t\t\t= 13;\nexport const KEY_ESC\t\t\t= 27;\nexport const KEY_LEFT\t\t\t= 37;\nexport const KEY_UP\t\t\t\t= 38;\nexport const KEY_RIGHT\t\t\t= 39;\nexport const KEY_DOWN\t\t\t= 40;\nexport const KEY_BACKSPACE\t\t= 8;\nexport const KEY_DELETE\t\t\t= 46;\nexport const KEY_TAB\t\t\t= 9;\n\nexport const IS_MAC      \t\t= typeof navigator === 'undefined' ? false : /Mac/.test(navigator.userAgent);\nexport const KEY_SHORTCUT\t\t= IS_MAC ? 'metaKey' : 'ctrlKey'; // ctrl key or apple key for ma\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"optgroup_columns\" (Tom Select.js)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport * as constants from '../../constants.ts';\nimport { parentMatch, nodeIndex } from '../../vanilla.ts';\n\nexport default function(this:TomSelect) {\n\tvar self = this;\n\n\tvar orig_keydown = self.onKeyDown;\n\n\tself.hook('instead','onKeyDown',(evt:KeyboardEvent)=>{\n\t\tvar index, option, options, optgroup;\n\n\t\tif( !self.isOpen || !(evt.keyCode === constants.KEY_LEFT || evt.keyCode === constants.KEY_RIGHT)) {\n\t\t\treturn orig_keydown.call(self,evt);\n\t\t}\n\n\t\tself.ignoreHover\t= true;\n\t\toptgroup\t\t\t= parentMatch(self.activeOption,'[data-group]');\n\t\tindex\t\t\t\t= nodeIndex(self.activeOption,'[data-selectable]');\n\n\t\tif( !optgroup ){\n\t\t\treturn;\n\t\t}\n\n\t\tif( evt.keyCode === constants.KEY_LEFT ){\n\t\t\toptgroup = optgroup.previousSibling;\n\t\t} else {\n\t\t\toptgroup = optgroup.nextSibling;\n\t\t}\n\n\t\tif( !optgroup ){\n\t\t\treturn;\n\t\t}\n\n\t\toptions\t\t\t\t= (<HTMLOptGroupElement>optgroup).querySelectorAll('[data-selectable]');\n\t\toption\t\t\t\t= options[ Math.min(options.length - 1, index) ] as HTMLElement;\n\n\t\tif( option ){\n\t\t\tself.setActiveOption(option);\n\t\t}\n\n\t});\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"remove_button\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { getDom } from '../../vanilla.ts';\nimport { escape_html, preventDefault, addEvent } from '../../utils.ts';\nimport { TomOption, TomItem } from '../../types/index.ts';\nimport { RBOptions } from './types.ts';\n\nexport default function(this:TomSelect, userOptions:RBOptions) {\n\n\tconst options = Object.assign({\n\t\t\tlabel     : '&times;',\n\t\t\ttitle     : 'Remove',\n\t\t\tclassName : 'remove',\n\t\t\tappend    : true\n\t\t}, userOptions);\n\n\n\t//options.className = 'remove-single';\n\tvar self\t\t\t= this;\n\n\t// override the render method to add remove button to each item\n\tif( !options.append ){\n\t\treturn;\n\t}\n\n\tvar html = '<a href=\"javascript:void(0)\" class=\"' + options.className + '\" tabindex=\"-1\" title=\"' + escape_html(options.title) + '\">' + options.label + '</a>';\n\n\tself.hook('after','setupTemplates',() => {\n\n\t\tvar orig_render_item = self.settings.render.item;\n\n\t\tself.settings.render.item = (data:TomOption, escape:typeof escape_html) => {\n\n\t\t\tvar item = getDom(orig_render_item.call(self, data, escape)) as TomItem;\n\n\t\t\tvar close_button = getDom(html);\n\t\t\titem.appendChild(close_button);\n\n\t\t\taddEvent(close_button,'mousedown',(evt) => {\n\t\t\t\tpreventDefault(evt,true);\n\t\t\t});\n\n\t\t\taddEvent(close_button,'click',(evt) => {\n\n\t\t\t\tif( self.isLocked ) return;\n\n\t\t\t\t// propagating will trigger the dropdown to show for single mode\n\t\t\t\tpreventDefault(evt,true);\n\n\t\t\t\tif( self.isLocked ) return;\n\t\t\t\tif( !self.shouldDelete([item],evt as MouseEvent) ) return;\n\n\t\t\t\tself.removeItem(item);\n\t\t\t\tself.refreshOptions(false);\n\t\t\t\tself.inputState();\n\t\t\t});\n\n\t\t\treturn item;\n\t\t};\n\n\t});\n\n\n};\n", "/**\n * Plugin: \"restore_on_backspace\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\nimport type TomSelect from '../../tom-select.ts';\nimport { TomOption } from '../../types/index.ts';\n\ntype TPluginOptions = {\n\ttext?:(option:TomOption)=>string,\n};\n\nexport default function(this:TomSelect, userOptions:TPluginOptions) {\n\tconst self = this;\n\n\tconst options = Object.assign({\n\t\ttext: (option:TomOption) => {\n\t\t\treturn option[self.settings.labelField];\n\t\t}\n\t},userOptions);\n\n\tself.on('item_remove',function(value:string){\n\t\tif( !self.isFocused ){\n\t\t\treturn;\n\t\t}\n\n\t\tif( self.control_input.value.trim() === '' ){\n\t\t\tvar option = self.options[value];\n\t\t\tif( option ){\n\t\t\t\tself.setTextboxValue(options.text.call(self, option));\n\t\t\t}\n\t\t}\n\t});\n\n};\n", "\nimport type TomSelect from './tom-select.ts';\nimport { TomLoadCallback } from './types/index.ts';\n\n\n/**\n * Converts a scalar to its best string representation\n * for hash keys and HTML attribute values.\n *\n * Transformations:\n *   'str'     -> 'str'\n *   null      -> ''\n *   undefined -> ''\n *   true      -> '1'\n *   false     -> '0'\n *   0         -> '0'\n *   1         -> '1'\n *\n */\nexport const hash_key = (value:undefined|null|boolean|string|number):string|null => {\n\tif (typeof value === 'undefined' || value === null) return null;\n\treturn get_hash(value);\n};\n\nexport const get_hash = (value:boolean|string|number):string => {\n\tif (typeof value === 'boolean') return value ? '1' : '0';\n\treturn value + '';\n};\n\n/**\n * Escapes a string for use within HTML.\n *\n */\nexport const escape_html = (str:string):string => {\n\treturn (str + '')\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;');\n};\n\n\n/**\n * use setTimeout if timeout > 0 \n */\nexport const timeout = (fn:()=>void,timeout:number): number | null => {\n\tif( timeout > 0 ){\n\t\treturn window.setTimeout(fn,timeout);\n\t}\n\n\tfn.call(null);\n\treturn null;\n}\n\n/**\n * Debounce the user provided load function\n *\n */\nexport const loadDebounce = (fn:(value:string,callback:TomLoadCallback) => void,delay:number) => {\n\tvar timeout: null|ReturnType<typeof setTimeout>;\n\treturn function(this:TomSelect, value:string,callback:TomLoadCallback) {\n\t\tvar self = this;\n\n\t\tif( timeout ){\n\t\t\tself.loading = Math.max(self.loading - 1, 0);\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(function() {\n\t\t\ttimeout = null;\n\t\t\tself.loadedSearches[value] = true;\n\t\t\tfn.call(self, value, callback);\n\n\t\t}, delay);\n\t};\n};\n\n\n/**\n * Debounce all fired events types listed in `types`\n * while executing the provided `fn`.\n *\n */\nexport const debounce_events = ( self:TomSelect, types:string[], fn:() => void ) => {\n\tvar type:string;\n\tvar trigger = self.trigger;\n\tvar event_args:{ [key: string]: any } = {};\n\n\t// override trigger method\n\tself.trigger = function(){\n\t\tvar type = arguments[0];\n\t\tif (types.indexOf(type) !== -1) {\n\t\t\tevent_args[type] = arguments;\n\t\t} else {\n\t\t\treturn trigger.apply(self, arguments);\n\t\t}\n\t};\n\n\t// invoke provided function\n\tfn.apply(self, []);\n\tself.trigger = trigger;\n\n\t// trigger queued events\n\tfor( type of types ){\n\t\tif( type in event_args ){\n\t\t\ttrigger.apply(self, event_args[type]);\n\t\t}\n\t}\n};\n\n\n/**\n * Determines the current selection within a text input control.\n * Returns an object containing:\n *   - start\n *   - length\n *\n * Note: \"selectionStart, selectionEnd ... apply only to inputs of types text, search, URL, tel and password\"\n * \t- https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n */\nexport const getSelection = (input:HTMLInputElement):{ start: number; length: number } => {\n\treturn {\n\t\tstart\t: input.selectionStart || 0,\n\t\tlength\t: (input.selectionEnd||0) - (input.selectionStart||0),\n\t};\n};\n\n\n/**\n * Prevent default\n *\n */\nexport const preventDefault = (evt?:Event, stop:boolean=false):void => {\n\tif( evt ){\n\t\tevt.preventDefault();\n\t\tif( stop ){\n\t\t\tevt.stopPropagation();\n\t\t}\n\t}\n}\n\n\n/**\n * Add event helper\n *\n */\nexport const addEvent = (target:EventTarget, type:string, callback:EventListenerOrEventListenerObject, options?:object):void => {\n\ttarget.addEventListener(type,callback,options);\n};\n\n\n/**\n * Return true if the requested key is down\n * Will return false if more than one control character is pressed ( when [ctrl+shift+a] != [ctrl+a] )\n * The current evt may not always set ( eg calling advanceSelection() )\n *\n */\nexport const isKeyDown = ( key_name:keyof (KeyboardEvent|MouseEvent), evt?:KeyboardEvent|MouseEvent ) => {\n\n\tif( !evt ){\n\t\treturn false;\n\t}\n\n\tif( !evt[key_name] ){\n\t\treturn false;\n\t}\n\n\tvar count = (evt.altKey?1:0) + (evt.ctrlKey?1:0) + (evt.shiftKey?1:0) + (evt.metaKey?1:0);\n\n\tif( count === 1 ){\n\t\treturn true;\n\t}\n\n\treturn false;\n};\n\n\n/**\n * Get the id of an element\n * If the id attribute is not set, set the attribute with the given id\n *\n */\nexport const getId = (el:Element,id:string) => {\n\tconst existing_id = el.getAttribute('id');\n\tif( existing_id ){\n\t\treturn existing_id;\n\t}\n\n\tel.setAttribute('id',id);\n\treturn id;\n};\n\n\n/**\n * Returns a string with backslashes added before characters that need to be escaped.\n */\nexport const addSlashes = (str:string):string => {\n\treturn str.replace(/[\\\\\"']/g, '\\\\$&');\n};\n\n/**\n *\n */\nexport const append = ( parent:Element|DocumentFragment, node: string|Node|null|undefined ):void =>{\n\tif( node ) parent.append(node);\n};\n\n/**\n * Iterates over arrays and hashes.\n *\n * ```\n * iterate(this.items, function(item, id) {\n *    // invoked for each item\n * });\n * ```\n *\n */\nexport const iterate = (object:[]|{[key:string]:any}, callback:(value:any,key:any)=>any) => {\n\n\tif ( Array.isArray(object)) {\n\t\tobject.forEach(callback);\n\n\t}else{\n\n\t\tfor (var key in object) {\n\t\t\tif (object.hasOwnProperty(key)) {\n\t\t\t\tcallback(object[key], key);\n\t\t\t}\n\t\t}\n\t}\n};\n", "\nimport { iterate } from './utils.ts';\n\n/**\n * Return a dom element from either a dom query string, jQuery object, a dom element or html string\n * https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro/35385518#35385518\n *\n * param query should be {}\n */\nexport const getDom = ( query:any ):HTMLElement => {\n\n\tif( query.jquery ){\n\t\treturn query[0];\n\t}\n\n\tif( query instanceof HTMLElement ){\n\t\treturn query;\n\t}\n\n\tif( isHtmlString(query) ){\n\t\tvar tpl = document.createElement('template');\n\t\ttpl.innerHTML = query.trim(); // Never return a text node of whitespace as the result\n\t\treturn tpl.content.firstChild as HTMLElement;\n\t}\n\n\treturn document.querySelector(query);\n};\n\nexport const isHtmlString = (arg:any): boolean => {\n\tif( typeof arg === 'string' && arg.indexOf('<') > -1 ){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport const escapeQuery = (query:string):string => {\n\treturn query.replace(/['\"\\\\]/g, '\\\\$&');\n}\n\n/**\n * Dispatch an event\n *\n */\nexport const triggerEvent = ( dom_el:HTMLElement, event_name:string ):void => {\n\tvar event = document.createEvent('HTMLEvents');\n\tevent.initEvent(event_name, true, false);\n\tdom_el.dispatchEvent(event)\n};\n\n/**\n * Apply CSS rules to a dom element\n *\n */\nexport const applyCSS = ( dom_el:HTMLElement, css:{ [key: string]: string|number }):void => {\n\tObject.assign(dom_el.style, css);\n}\n\n\n/**\n * Add css classes\n *\n */\nexport const addClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n\tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map( cls => {\n\t\t\tel.classList.add( cls );\n\t\t});\n\t});\n}\n\n/**\n * Remove css classes\n *\n */\n export const removeClasses = ( elmts:HTMLElement|HTMLElement[], ...classes:string[]|string[][] ) => {\n\n \tvar norm_classes \t= classesArray(classes);\n\telmts\t\t\t\t= castAsArray(elmts);\n\n\telmts.map( el => {\n\t\tnorm_classes.map(cls => {\n\t \t\tel.classList.remove( cls );\n\t\t});\n \t});\n }\n\n\n/**\n * Return arguments\n *\n */\nexport const classesArray = (args:string[]|string[][]):string[] => {\n\tvar classes:string[] = [];\n\titerate( args, (_classes) =>{\n\t\tif( typeof _classes === 'string' ){\n\t\t\t_classes = _classes.trim().split(/[\\t\\n\\f\\r\\s]/);\n\t\t}\n\t\tif( Array.isArray(_classes) ){\n\t\t\tclasses = classes.concat(_classes);\n\t\t}\n\t});\n\n\treturn classes.filter(Boolean);\n}\n\n\n/**\n * Create an array from arg if it's not already an array\n *\n */\nexport const castAsArray = (arg:any):Array<any> => {\n\tif( !Array.isArray(arg) ){\n \t\targ = [arg];\n \t}\n\treturn arg;\n}\n\n\n/**\n * Get the closest node to the evt.target matching the selector\n * Stops at wrapper\n *\n */\nexport const parentMatch = ( target:null|HTMLElement, selector:string, wrapper?:HTMLElement ):HTMLElement|void => {\n\n\tif( wrapper && !wrapper.contains(target) ){\n\t\treturn;\n\t}\n\n\twhile( target && target.matches ){\n\n\t\tif( target.matches(selector) ){\n\t\t\treturn target;\n\t\t}\n\n\t\ttarget = target.parentNode as HTMLElement;\n\t}\n}\n\n\n/**\n * Get the first or last item from an array\n *\n * > 0 - right (last)\n * <= 0 - left (first)\n *\n */\nexport const getTail = ( list:Array<any>|NodeList, direction:number=0 ):any => {\n\n\tif( direction > 0 ){\n\t\treturn list[list.length-1];\n\t}\n\n\treturn list[0];\n}\n\n/**\n * Return true if an object is empty\n *\n */\nexport const isEmptyObject = (obj:object):boolean => {\n\treturn (Object.keys(obj).length === 0);\n}\n\n\n/**\n * Get the index of an element amongst sibling nodes of the same type\n *\n */\nexport const nodeIndex = ( el:null|Element, amongst?:string ):number => {\n\tif (!el) return -1;\n\n\tamongst = amongst || el.nodeName;\n\n\tvar i = 0;\n\twhile( el = el.previousElementSibling ){\n\n\t\tif( el.matches(amongst) ){\n\t\t\ti++;\n\t\t}\n\t}\n\treturn i;\n}\n\n\n/**\n * Set attributes of an element\n *\n */\nexport const setAttr = (el:Element,attrs:{ [key: string]: null|string|number }) => {\n\titerate( attrs,(val,attr) => {\n\t\tif( val == null ){\n\t\t\tel.removeAttribute(attr as string);\n\t\t}else{\n\t\t\tel.setAttribute(attr as string, ''+val);\n\t\t}\n\t});\n}\n\n\n/**\n * Replace a node\n */\nexport const replaceNode = ( existing:Node, replacement:Node ) => {\n\tif( existing.parentNode ) existing.parentNode.replaceChild(replacement, existing);\n}\n", "/**\n * Plugin: \"restore_on_backspace\" (Tom Select)\n * Copyright (c) contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this\n * file except in compliance with the License. You may obtain a copy of the License at:\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n * ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n *\n */\n\nimport type TomSelect from '../../tom-select.ts';\nimport { TomOption } from '../../types/index.ts';\nimport { addClasses } from '../../vanilla.ts';\n\nexport default function(this:TomSelect) {\n\tconst self\t\t\t\t\t\t\t= this;\n\tconst orig_canLoad\t\t\t\t\t= self.canLoad;\n\tconst orig_clearActiveOption\t\t= self.clearActiveOption;\n\tconst orig_loadCallback\t\t\t\t= self.loadCallback;\n\n\tvar pagination:{[key:string]:any}\t= {};\n\tvar dropdown_content:HTMLElement;\n\tvar loading_more\t\t\t\t\t= false;\n\tvar load_more_opt:HTMLElement;\n\tvar default_values: string[]\t\t= [];\n\n\tif( !self.settings.shouldLoadMore ){\n\n\t\t// return true if additional results should be loaded\n\t\tself.settings.shouldLoadMore = ():boolean=>{\n\n\t\t\tconst scroll_percent = dropdown_content.clientHeight / (dropdown_content.scrollHeight - dropdown_content.scrollTop);\n\t\t\tif( scroll_percent > 0.9 ){\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif( self.activeOption ){\n\t\t\t\tvar selectable\t= self.selectable();\n\t\t\t\tvar index\t\t= Array.from(selectable).indexOf(self.activeOption);\n\t\t\t\tif( index >= (selectable.length-2) ){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\n\tif( !self.settings.firstUrl ){\n\t\tthrow 'virtual_scroll plugin requires a firstUrl() method';\n\t}\n\n\n\t// in order for virtual scrolling to work,\n\t// options need to be ordered the same way they're returned from the remote data source\n\tself.settings.sortField\t\t\t= [{field:'$order'},{field:'$score'}];\n\n\n\t// can we load more results for given query?\n\tconst canLoadMore = (query:string):boolean => {\n\n\t\tif( typeof self.settings.maxOptions === 'number' && dropdown_content.children.length >= self.settings.maxOptions ){\n\t\t\treturn false;\n\t\t}\n\n\t\tif( (query in pagination) && pagination[query] ){\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\tconst clearFilter = (option:TomOption, value:string):boolean => {\n\t\tif( self.items.indexOf(value) >= 0 || default_values.indexOf(value) >= 0 ){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t};\n\n\n\t// set the next url that will be\n\tself.setNextUrl = (value:string,next_url:any):void => {\n\t\tpagination[value] = next_url;\n\t};\n\n\t// getUrl() to be used in settings.load()\n\tself.getUrl = (query:string):any =>{\n\n\t\tif( query in pagination ){\n\t\t\tconst next_url = pagination[query];\n\t\t\tpagination[query] = false;\n\t\t\treturn next_url;\n\t\t}\n\n\t\t// if the user goes back to a previous query\n\t\t// we need to load the first page again\n\t\tself.clearPagination();\n\n\t\treturn self.settings.firstUrl.call(self,query);\n\t};\n\n\t// clear pagination\n\tself.clearPagination = ():void =>{\n\t\tpagination = {};\n\t};\n\n\t// don't clear the active option (and cause unwanted dropdown scroll)\n\t// while loading more results\n\tself.hook('instead','clearActiveOption',()=>{\n\n\t\tif( loading_more ){\n\t\t\treturn;\n\t\t}\n\n\t\treturn orig_clearActiveOption.call(self);\n\t});\n\n\t// override the canLoad method\n\tself.hook('instead','canLoad',(query:string)=>{\n\n\t\t// first time the query has been seen\n\t\tif( !(query in pagination) ){\n\t\t\treturn orig_canLoad.call(self,query);\n\t\t}\n\n\t\treturn canLoadMore(query);\n\t});\n\n\n\t// wrap the load\n\tself.hook('instead','loadCallback',( options:TomOption[], optgroups:TomOption[])=>{\n\n\t\tif( !loading_more ){\n\t\t\tself.clearOptions(clearFilter);\n\t\t}else if( load_more_opt ){\n\t\t\tconst first_option = options[0];\n\t\t\tif( first_option !== undefined ){\n\t\t\t\tload_more_opt.dataset.value\t\t= first_option[self.settings.valueField];\n\t\t\t}\n\t\t}\n\n\t\torig_loadCallback.call( self, options, optgroups);\n\n\t\tloading_more = false;\n\t});\n\n\n\t// add templates to dropdown\n\t//\tloading_more if we have another url in the queue\n\t//\tno_more_results if we don't have another url in the queue\n\tself.hook('after','refreshOptions',()=>{\n\n\t\tconst query\t\t= self.lastValue;\n\t\tvar option;\n\n\t\tif( canLoadMore(query) ){\n\n\t\t\toption = self.render('loading_more',{query:query});\n\t\t\tif( option ){\n\t\t\t\toption.setAttribute('data-selectable',''); // so that navigating dropdown with [down] keypresses can navigate to this node\n\t\t\t\tload_more_opt = option;\n\t\t\t}\n\n\t\t}else if( (query in pagination) && !dropdown_content.querySelector('.no-results') ){\n\t\t\toption = self.render('no_more_results',{query:query});\n\t\t}\n\n\t\tif( option ){\n\t\t\taddClasses(option,self.settings.optionClass);\n\t\t\tdropdown_content.append( option );\n\t\t}\n\n\t});\n\n\n\t// add scroll listener and default templates\n\tself.on('initialize',()=>{\n\t\tdefault_values = Object.keys(self.options);\n\t\tdropdown_content = self.dropdown_content;\n\n\t\t// default templates\n\t\tself.settings.render = Object.assign({}, {\n\t\t\tloading_more:() => {\n\t\t\t\treturn `<div class=\"loading-more-results\">Loading more results ... </div>`;\n\t\t\t},\n\t\t\tno_more_results:() =>{\n\t\t\t\treturn `<div class=\"no-more-results\">No more results</div>`;\n\t\t\t}\n\t\t},self.settings.render);\n\n\n\t\t// watch dropdown content scroll position\n\t\tdropdown_content.addEventListener('scroll',()=>{\n\n\t\t\tif( !self.settings.shouldLoadMore.call(self) ){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// !important: this will get checked again in load() but we still need to check here otherwise loading_more will be set to true\n\t\t\tif( !canLoadMore(self.lastValue) ){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// don't call load() too much\n\t\t\tif( loading_more ) return;\n\n\n\t\t\tloading_more = true;\n\t\t\tself.load.call(self,self.lastValue);\n\t\t});\n\t});\n\n};\n", "import TomSelect from './tom-select.ts';\n\nimport change_listener from './plugins/change_listener/plugin.ts';\nimport checkbox_options from './plugins/checkbox_options/plugin.ts';\nimport clear_button from './plugins/clear_button/plugin.ts';\nimport drag_drop from './plugins/drag_drop/plugin.ts';\nimport dropdown_header from './plugins/dropdown_header/plugin.ts';\nimport caret_position from './plugins/caret_position/plugin.ts';\nimport dropdown_input from './plugins/dropdown_input/plugin.ts';\nimport input_autogrow from './plugins/input_autogrow/plugin.ts';\nimport no_backspace_delete from './plugins/no_backspace_delete/plugin.ts';\nimport no_active_items from './plugins/no_active_items/plugin.ts';\nimport optgroup_columns from './plugins/optgroup_columns/plugin.ts';\nimport remove_button from './plugins/remove_button/plugin.ts';\nimport restore_on_backspace from './plugins/restore_on_backspace/plugin.ts';\nimport virtual_scroll from './plugins/virtual_scroll/plugin.ts';\n\nTomSelect.define('change_listener', change_listener);\nTomSelect.define('checkbox_options', checkbox_options);\nTomSelect.define('clear_button', clear_button);\nTomSelect.define('drag_drop', drag_drop);\nTomSelect.define('dropdown_header', dropdown_header);\nTomSelect.define('caret_position', caret_position);\nTomSelect.define('dropdown_input', dropdown_input);\nTomSelect.define('input_autogrow', input_autogrow);\nTomSelect.define('no_backspace_delete', no_backspace_delete);\nTomSelect.define('no_active_items', no_active_items);\nTomSelect.define('optgroup_columns', optgroup_columns);\nTomSelect.define('remove_button', remove_button);\nTomSelect.define('restore_on_backspace', restore_on_backspace);\nTomSelect.define('virtual_scroll', virtual_scroll);\n\nexport default TomSelect;\n"],
  "mappings": "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",
  "names": ["plugin", "code_points", "unicode_map", "timeout", "type", "iterate", "iterate", "element", "el", "iterate", "value", "input", "iterate", "optgroup", "label", "addEvent", "target", "type", "callback", "options", "addEventListener", "input", "sync", "hash_key", "value", "get_hash", "preventDefault", "evt", "stop", "stopPropagation", "getDom", "query", "jquery", "HTMLElement", "isHtmlString", "tpl", "document", "createElement", "innerHTML", "trim", "content", "firstChild", "querySelector", "arg", "indexOf", "plugin", "userOptions", "self", "orig_onOptionSelect", "onOptionSelect", "settings", "hideSelected", "cbOptions", "Object", "assign", "className", "checkedClassNames", "undefined", "uncheckedClassNames", "UpdateChecked", "checkbox", "toCheck", "checked", "classList", "remove", "add", "UpdateCheckbox", "option", "setTimeout", "HTMLInputElement", "contains", "hook", "orig_render_option", "render", "data", "escape_html", "rendered", "call", "addEventListener", "type", "hashed", "valueField", "items", "prepend", "on", "getOption", "removeItem", "dataset", "refreshOptions", "getDom", "query", "jquery", "HTMLElement", "isHtmlString", "tpl", "document", "createElement", "innerHTML", "trim", "content", "firstChild", "querySelector", "arg", "indexOf", "plugin", "userOptions", "self", "options", "Object", "assign", "className", "title", "html", "data", "on", "button", "addEventListener", "evt", "isLocked", "clear", "settings", "mode", "allowEmptyOption", "addItem", "preventDefault", "stopPropagation", "control", "appendChild", "preventDefault", "evt", "stop", "stopPropagation", "addEvent", "target", "type", "callback", "options", "addEventListener", "iterate", "object", "Array", "isArray", "forEach", "key", "hasOwnProperty", "getDom", "query", "jquery", "HTMLElement", "isHtmlString", "tpl", "document", "createElement", "innerHTML", "trim", "content", "firstChild", "querySelector", "arg", "indexOf", "setAttr", "el", "attrs", "val", "attr", "removeAttribute", "setAttribute", "insertAfter", "referenceNode", "newNode", "_referenceNode$parent", "parentNode", "insertBefore", "nextSibling", "_referenceNode$parent2", "isBefore", "_newNode", "previousElementSibling", "plugin", "self", "settings", "mode", "orig_lock", "lock", "orig_unlock", "unlock", "sortable", "drag_item", "hook", "orig_render_item", "render", "item", "data", "escape", "call", "mousedown", "dragStart", "setTimeout", "classList", "add", "dragOver", "moveitem", "dragLeave", "remove", "targetitem", "dragitem", "undefined", "dragend", "_drag_item", "querySelectorAll", "values", "control", "dataset", "value", "push", "setValue", "preventDefault", "evt", "stop", "stopPropagation", "getDom", "query", "jquery", "HTMLElement", "isHtmlString", "tpl", "document", "createElement", "innerHTML", "trim", "content", "firstChild", "querySelector", "arg", "indexOf", "plugin", "userOptions", "self", "options", "Object", "assign", "title", "headerClass", "titleRowClass", "labelClass", "closeClass", "html", "data", "on", "header", "close_link", "addEventListener", "close", "dropdown", "insertBefore", "iterate", "object", "callback", "Array", "isArray", "forEach", "key", "hasOwnProperty", "removeClasses", "elmts", "classes", "norm_classes", "classesArray", "castAsArray", "map", "el", "cls", "classList", "remove", "args", "_classes", "trim", "split", "concat", "filter", "Boolean", "arg", "nodeIndex", "amongst", "nodeName", "i", "previousElementSibling", "matches", "plugin", "self", "hook", "new_pos", "settings", "mode", "control", "contains", "control_input", "items", "length", "Math", "max", "min", "caretPos", "isPending", "controlChildren", "child", "j", "insertAdjacentElement", "appendChild", "direction", "isFocused", "last_active", "getLastActive", "idx", "setCaret", "setActiveItem", "KEY_ESC", "KEY_TAB", "preventDefault", "evt", "stop", "stopPropagation", "addEvent", "target", "type", "callback", "options", "addEventListener", "iterate", "object", "Array", "isArray", "forEach", "key", "hasOwnProperty", "getDom", "query", "jquery", "HTMLElement", "isHtmlString", "tpl", "document", "createElement", "innerHTML", "trim", "content", "firstChild", "querySelector", "arg", "indexOf", "addClasses", "elmts", "classes", "norm_classes", "classesArray", "castAsArray", "map", "el", "cls", "classList", "add", "args", "_classes", "split", "concat", "filter", "Boolean", "plugin", "self", "settings", "shouldOpen", "hook", "focus_node", "control", "control_input", "div", "append", "dropdown", "insertBefore", "placeholder", "on", "keyCode", "constants", "isOpen", "close", "clearActiveItems", "tabIndex", "onKeyDown", "call", "isDisabled", "focus", "orig_onBlur", "onBlur", "relatedTarget", "preventScroll", "addEvent", "target", "type", "callback", "options", "addEventListener", "plugin", "self", "on", "test_input", "document", "createElement", "control", "control_input", "style", "cssText", "wrapper", "appendChild", "transfer_styles", "style_name", "resize", "textContent", "value", "width", "clientWidth", "plugin", "self", "orig_deleteSelection", "deleteSelection", "hook", "evt", "activeItems", "length", "call", "plugin", "hook", "KEY_LEFT", "KEY_RIGHT", "parentMatch", "target", "selector", "wrapper", "matches", "parentNode", "nodeIndex", "el", "amongst", "nodeName", "i", "previousElementSibling", "plugin", "self", "orig_keydown", "onKeyDown", "hook", "evt", "index", "option", "options", "optgroup", "isOpen", "keyCode", "constants", "call", "ignoreHover", "activeOption", "previousSibling", "nextSibling", "querySelectorAll", "Math", "min", "length", "setActiveOption", "escape_html", "str", "replace", "preventDefault", "evt", "stop", "stopPropagation", "addEvent", "target", "type", "callback", "options", "addEventListener", "getDom", "query", "jquery", "HTMLElement", "isHtmlString", "tpl", "document", "createElement", "innerHTML", "trim", "content", "firstChild", "querySelector", "arg", "indexOf", "plugin", "userOptions", "Object", "assign", "label", "title", "className", "append", "self", "html", "hook", "orig_render_item", "settings", "render", "item", "data", "escape", "call", "close_button", "appendChild", "isLocked", "shouldDelete", "removeItem", "refreshOptions", "inputState", "plugin", "userOptions", "self", "options", "Object", "assign", "text", "option", "settings", "labelField", "on", "value", "isFocused", "control_input", "trim", "setTextboxValue", "call", "iterate", "object", "callback", "Array", "isArray", "forEach", "key", "hasOwnProperty", "addClasses", "elmts", "classes", "norm_classes", "classesArray", "castAsArray", "map", "el", "cls", "classList", "add", "args", "_classes", "trim", "split", "concat", "filter", "Boolean", "arg", "plugin", "self", "orig_canLoad", "canLoad", "orig_clearActiveOption", "clearActiveOption", "orig_loadCallback", "loadCallback", "pagination", "dropdown_content", "loading_more", "load_more_opt", "default_values", "settings", "shouldLoadMore", "scroll_percent", "clientHeight", "scrollHeight", "scrollTop", "activeOption", "selectable", "index", "from", "indexOf", "length", "firstUrl", "sortField", "field", "canLoadMore", "query", "maxOptions", "children", "clearFilter", "option", "value", "items", "setNextUrl", "next_url", "getUrl", "clearPagination", "call", "hook", "options", "optgroups", "clearOptions", "first_option", "undefined", "dataset", "valueField", "lastValue", "render", "setAttribute", "querySelector", "optionClass", "append", "on", "Object", "keys", "assign", "no_more_results", "addEventListener", "load", "plugin"]
}
